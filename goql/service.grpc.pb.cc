// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace gooption {

static const char* EuropeanOptionPricer_method_names[] = {
  "/gooption.EuropeanOptionPricer/Price",
  "/gooption.EuropeanOptionPricer/Greek",
  "/gooption.EuropeanOptionPricer/ImpliedVol",
};

std::unique_ptr< EuropeanOptionPricer::Stub> EuropeanOptionPricer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EuropeanOptionPricer::Stub> stub(new EuropeanOptionPricer::Stub(channel));
  return stub;
}

EuropeanOptionPricer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Price_(EuropeanOptionPricer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Greek_(EuropeanOptionPricer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ImpliedVol_(EuropeanOptionPricer_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EuropeanOptionPricer::Stub::Price(::grpc::ClientContext* context, const ::gooption::PriceRequest& request, ::gooption::PriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Price_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gooption::PriceResponse>* EuropeanOptionPricer::Stub::AsyncPriceRaw(::grpc::ClientContext* context, const ::gooption::PriceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::gooption::PriceResponse>::Create(channel_.get(), cq, rpcmethod_Price_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::gooption::PriceResponse>* EuropeanOptionPricer::Stub::PrepareAsyncPriceRaw(::grpc::ClientContext* context, const ::gooption::PriceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::gooption::PriceResponse>::Create(channel_.get(), cq, rpcmethod_Price_, context, request, false);
}

::grpc::Status EuropeanOptionPricer::Stub::Greek(::grpc::ClientContext* context, const ::gooption::GreekRequest& request, ::gooption::GreekResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Greek_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gooption::GreekResponse>* EuropeanOptionPricer::Stub::AsyncGreekRaw(::grpc::ClientContext* context, const ::gooption::GreekRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::gooption::GreekResponse>::Create(channel_.get(), cq, rpcmethod_Greek_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::gooption::GreekResponse>* EuropeanOptionPricer::Stub::PrepareAsyncGreekRaw(::grpc::ClientContext* context, const ::gooption::GreekRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::gooption::GreekResponse>::Create(channel_.get(), cq, rpcmethod_Greek_, context, request, false);
}

::grpc::Status EuropeanOptionPricer::Stub::ImpliedVol(::grpc::ClientContext* context, const ::gooption::ImpliedVolRequest& request, ::gooption::ImpliedVolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ImpliedVol_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gooption::ImpliedVolResponse>* EuropeanOptionPricer::Stub::AsyncImpliedVolRaw(::grpc::ClientContext* context, const ::gooption::ImpliedVolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::gooption::ImpliedVolResponse>::Create(channel_.get(), cq, rpcmethod_ImpliedVol_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::gooption::ImpliedVolResponse>* EuropeanOptionPricer::Stub::PrepareAsyncImpliedVolRaw(::grpc::ClientContext* context, const ::gooption::ImpliedVolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::gooption::ImpliedVolResponse>::Create(channel_.get(), cq, rpcmethod_ImpliedVol_, context, request, false);
}

EuropeanOptionPricer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EuropeanOptionPricer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EuropeanOptionPricer::Service, ::gooption::PriceRequest, ::gooption::PriceResponse>(
          std::mem_fn(&EuropeanOptionPricer::Service::Price), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EuropeanOptionPricer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EuropeanOptionPricer::Service, ::gooption::GreekRequest, ::gooption::GreekResponse>(
          std::mem_fn(&EuropeanOptionPricer::Service::Greek), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EuropeanOptionPricer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EuropeanOptionPricer::Service, ::gooption::ImpliedVolRequest, ::gooption::ImpliedVolResponse>(
          std::mem_fn(&EuropeanOptionPricer::Service::ImpliedVol), this)));
}

EuropeanOptionPricer::Service::~Service() {
}

::grpc::Status EuropeanOptionPricer::Service::Price(::grpc::ServerContext* context, const ::gooption::PriceRequest* request, ::gooption::PriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EuropeanOptionPricer::Service::Greek(::grpc::ServerContext* context, const ::gooption::GreekRequest* request, ::gooption::GreekResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EuropeanOptionPricer::Service::ImpliedVol(::grpc::ServerContext* context, const ::gooption::ImpliedVolRequest* request, ::gooption::ImpliedVolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gooption

