// Code generated by protoc-gen-go. DO NOT EDIT.
// source: european.proto

package api_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type European struct {
	EuropeanId           string   `protobuf:"bytes,1,opt,name=european_id,json=europeanId,proto3" json:"european_id,omitempty"`
	Timestamp            float64  `protobuf:"fixed64,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Ticker               string   `protobuf:"bytes,3,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Undticker            string   `protobuf:"bytes,4,opt,name=undticker,proto3" json:"undticker,omitempty"`
	Strike               float64  `protobuf:"fixed64,5,opt,name=strike,proto3" json:"strike,omitempty"`
	Expiry               float64  `protobuf:"fixed64,6,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Putcall              string   `protobuf:"bytes,7,opt,name=putcall,proto3" json:"putcall,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *European) Reset()         { *m = European{} }
func (m *European) String() string { return proto.CompactTextString(m) }
func (*European) ProtoMessage()    {}
func (*European) Descriptor() ([]byte, []int) {
	return fileDescriptor_4735b72c5277468d, []int{0}
}

func (m *European) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_European.Unmarshal(m, b)
}
func (m *European) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_European.Marshal(b, m, deterministic)
}
func (m *European) XXX_Merge(src proto.Message) {
	xxx_messageInfo_European.Merge(m, src)
}
func (m *European) XXX_Size() int {
	return xxx_messageInfo_European.Size(m)
}
func (m *European) XXX_DiscardUnknown() {
	xxx_messageInfo_European.DiscardUnknown(m)
}

var xxx_messageInfo_European proto.InternalMessageInfo

func (m *European) GetEuropeanId() string {
	if m != nil {
		return m.EuropeanId
	}
	return ""
}

func (m *European) GetTimestamp() float64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *European) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *European) GetUndticker() string {
	if m != nil {
		return m.Undticker
	}
	return ""
}

func (m *European) GetStrike() float64 {
	if m != nil {
		return m.Strike
	}
	return 0
}

func (m *European) GetExpiry() float64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *European) GetPutcall() string {
	if m != nil {
		return m.Putcall
	}
	return ""
}

type ListEuropeansRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListEuropeansRequest) Reset()         { *m = ListEuropeansRequest{} }
func (m *ListEuropeansRequest) String() string { return proto.CompactTextString(m) }
func (*ListEuropeansRequest) ProtoMessage()    {}
func (*ListEuropeansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4735b72c5277468d, []int{1}
}

func (m *ListEuropeansRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListEuropeansRequest.Unmarshal(m, b)
}
func (m *ListEuropeansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListEuropeansRequest.Marshal(b, m, deterministic)
}
func (m *ListEuropeansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEuropeansRequest.Merge(m, src)
}
func (m *ListEuropeansRequest) XXX_Size() int {
	return xxx_messageInfo_ListEuropeansRequest.Size(m)
}
func (m *ListEuropeansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEuropeansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEuropeansRequest proto.InternalMessageInfo

type ListEuropeansResponse struct {
	Europeans            []*European `protobuf:"bytes,1,rep,name=europeans,proto3" json:"europeans,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListEuropeansResponse) Reset()         { *m = ListEuropeansResponse{} }
func (m *ListEuropeansResponse) String() string { return proto.CompactTextString(m) }
func (*ListEuropeansResponse) ProtoMessage()    {}
func (*ListEuropeansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4735b72c5277468d, []int{2}
}

func (m *ListEuropeansResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListEuropeansResponse.Unmarshal(m, b)
}
func (m *ListEuropeansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListEuropeansResponse.Marshal(b, m, deterministic)
}
func (m *ListEuropeansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEuropeansResponse.Merge(m, src)
}
func (m *ListEuropeansResponse) XXX_Size() int {
	return xxx_messageInfo_ListEuropeansResponse.Size(m)
}
func (m *ListEuropeansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEuropeansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListEuropeansResponse proto.InternalMessageInfo

func (m *ListEuropeansResponse) GetEuropeans() []*European {
	if m != nil {
		return m.Europeans
	}
	return nil
}

type GetEuropeanRequest struct {
	EuropeanId           string   `protobuf:"bytes,1,opt,name=european_id,json=europeanId,proto3" json:"european_id,omitempty"`
	Ticker               string   `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Timestamp            float64  `protobuf:"fixed64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEuropeanRequest) Reset()         { *m = GetEuropeanRequest{} }
func (m *GetEuropeanRequest) String() string { return proto.CompactTextString(m) }
func (*GetEuropeanRequest) ProtoMessage()    {}
func (*GetEuropeanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4735b72c5277468d, []int{3}
}

func (m *GetEuropeanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEuropeanRequest.Unmarshal(m, b)
}
func (m *GetEuropeanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEuropeanRequest.Marshal(b, m, deterministic)
}
func (m *GetEuropeanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEuropeanRequest.Merge(m, src)
}
func (m *GetEuropeanRequest) XXX_Size() int {
	return xxx_messageInfo_GetEuropeanRequest.Size(m)
}
func (m *GetEuropeanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEuropeanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEuropeanRequest proto.InternalMessageInfo

func (m *GetEuropeanRequest) GetEuropeanId() string {
	if m != nil {
		return m.EuropeanId
	}
	return ""
}

func (m *GetEuropeanRequest) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *GetEuropeanRequest) GetTimestamp() float64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type CreateEuropeanRequest struct {
	European             *European `protobuf:"bytes,1,opt,name=european,proto3" json:"european,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateEuropeanRequest) Reset()         { *m = CreateEuropeanRequest{} }
func (m *CreateEuropeanRequest) String() string { return proto.CompactTextString(m) }
func (*CreateEuropeanRequest) ProtoMessage()    {}
func (*CreateEuropeanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4735b72c5277468d, []int{4}
}

func (m *CreateEuropeanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateEuropeanRequest.Unmarshal(m, b)
}
func (m *CreateEuropeanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateEuropeanRequest.Marshal(b, m, deterministic)
}
func (m *CreateEuropeanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateEuropeanRequest.Merge(m, src)
}
func (m *CreateEuropeanRequest) XXX_Size() int {
	return xxx_messageInfo_CreateEuropeanRequest.Size(m)
}
func (m *CreateEuropeanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateEuropeanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateEuropeanRequest proto.InternalMessageInfo

func (m *CreateEuropeanRequest) GetEuropean() *European {
	if m != nil {
		return m.European
	}
	return nil
}

type UpdateEuropeanRequest struct {
	European             *European `protobuf:"bytes,1,opt,name=european,proto3" json:"european,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateEuropeanRequest) Reset()         { *m = UpdateEuropeanRequest{} }
func (m *UpdateEuropeanRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateEuropeanRequest) ProtoMessage()    {}
func (*UpdateEuropeanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4735b72c5277468d, []int{5}
}

func (m *UpdateEuropeanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateEuropeanRequest.Unmarshal(m, b)
}
func (m *UpdateEuropeanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateEuropeanRequest.Marshal(b, m, deterministic)
}
func (m *UpdateEuropeanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEuropeanRequest.Merge(m, src)
}
func (m *UpdateEuropeanRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateEuropeanRequest.Size(m)
}
func (m *UpdateEuropeanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEuropeanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEuropeanRequest proto.InternalMessageInfo

func (m *UpdateEuropeanRequest) GetEuropean() *European {
	if m != nil {
		return m.European
	}
	return nil
}

type DeleteEuropeanRequest struct {
	EuropeanId           string   `protobuf:"bytes,1,opt,name=european_id,json=europeanId,proto3" json:"european_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteEuropeanRequest) Reset()         { *m = DeleteEuropeanRequest{} }
func (m *DeleteEuropeanRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteEuropeanRequest) ProtoMessage()    {}
func (*DeleteEuropeanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4735b72c5277468d, []int{6}
}

func (m *DeleteEuropeanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteEuropeanRequest.Unmarshal(m, b)
}
func (m *DeleteEuropeanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteEuropeanRequest.Marshal(b, m, deterministic)
}
func (m *DeleteEuropeanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteEuropeanRequest.Merge(m, src)
}
func (m *DeleteEuropeanRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteEuropeanRequest.Size(m)
}
func (m *DeleteEuropeanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteEuropeanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteEuropeanRequest proto.InternalMessageInfo

func (m *DeleteEuropeanRequest) GetEuropeanId() string {
	if m != nil {
		return m.EuropeanId
	}
	return ""
}

func init() {
	proto.RegisterType((*European)(nil), "gooption.contract.European")
	proto.RegisterType((*ListEuropeansRequest)(nil), "gooption.contract.ListEuropeansRequest")
	proto.RegisterType((*ListEuropeansResponse)(nil), "gooption.contract.ListEuropeansResponse")
	proto.RegisterType((*GetEuropeanRequest)(nil), "gooption.contract.GetEuropeanRequest")
	proto.RegisterType((*CreateEuropeanRequest)(nil), "gooption.contract.CreateEuropeanRequest")
	proto.RegisterType((*UpdateEuropeanRequest)(nil), "gooption.contract.UpdateEuropeanRequest")
	proto.RegisterType((*DeleteEuropeanRequest)(nil), "gooption.contract.DeleteEuropeanRequest")
}

func init() { proto.RegisterFile("european.proto", fileDescriptor_4735b72c5277468d) }

var fileDescriptor_4735b72c5277468d = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0x26, 0xed, 0xda, 0xdd, 0xbe, 0x6a, 0xc5, 0xc1, 0x96, 0x90, 0x2d, 0x58, 0x03, 0x62, 0x11,
	0x36, 0x81, 0x16, 0xf1, 0xd7, 0x4d, 0x5d, 0x44, 0xf0, 0x20, 0x11, 0x2f, 0x5e, 0x96, 0x34, 0x7d,
	0xd6, 0xa1, 0x6d, 0x66, 0xcc, 0x4c, 0x16, 0x8b, 0x78, 0xf1, 0xec, 0xcd, 0xbf, 0xca, 0xb3, 0xff,
	0x82, 0x7f, 0x85, 0x27, 0xc9, 0x24, 0x93, 0xa4, 0xed, 0xd8, 0x5e, 0xf6, 0x96, 0xf7, 0x5e, 0xde,
	0xf7, 0xcd, 0xfb, 0xbe, 0xc7, 0x83, 0x2e, 0xa6, 0x09, 0xe3, 0x18, 0xc6, 0x1e, 0x4f, 0x98, 0x64,
	0xe4, 0xd6, 0x9c, 0x31, 0x2e, 0x29, 0x8b, 0xbd, 0x88, 0xc5, 0x32, 0x09, 0x23, 0xe9, 0x0c, 0xe6,
	0x8c, 0xcd, 0x97, 0xe8, 0x87, 0x9c, 0xfa, 0x61, 0x1c, 0x33, 0x19, 0x66, 0x75, 0x91, 0x37, 0x38,
	0xa7, 0x45, 0x55, 0x45, 0xd3, 0xf4, 0xa3, 0x8f, 0x2b, 0x2e, 0xd7, 0x79, 0xd1, 0xfd, 0x65, 0xc1,
	0xc9, 0x79, 0x41, 0x40, 0xee, 0x40, 0x47, 0x93, 0x5d, 0xd0, 0x99, 0x6d, 0x0d, 0xad, 0x51, 0x3b,
	0x00, 0x9d, 0x7a, 0x3d, 0x23, 0x03, 0x68, 0x4b, 0xba, 0x42, 0x21, 0xc3, 0x15, 0xb7, 0x1b, 0x43,
	0x6b, 0x64, 0x05, 0x55, 0x82, 0xf4, 0xa1, 0x25, 0x69, 0xb4, 0xc0, 0xc4, 0x6e, 0xaa, 0xce, 0x22,
	0xca, 0xba, 0xd2, 0x78, 0x56, 0x94, 0x8e, 0x54, 0xa9, 0x4a, 0x64, 0x5d, 0x42, 0x26, 0x74, 0x81,
	0xf6, 0x35, 0x05, 0x58, 0x44, 0x59, 0x1e, 0xbf, 0x70, 0x9a, 0xac, 0xed, 0x56, 0x9e, 0xcf, 0x23,
	0x62, 0xc3, 0x31, 0x4f, 0x65, 0x14, 0x2e, 0x97, 0xf6, 0xb1, 0xc2, 0xd2, 0xa1, 0xdb, 0x87, 0xdb,
	0x6f, 0xa8, 0x90, 0x7a, 0x1c, 0x11, 0xe0, 0xe7, 0x14, 0x85, 0x74, 0x03, 0xe8, 0x6d, 0xe5, 0x05,
	0x67, 0xb1, 0x40, 0xf2, 0x04, 0xda, 0x7a, 0x38, 0x61, 0x5b, 0xc3, 0xe6, 0xa8, 0x33, 0x3e, 0xf5,
	0x76, 0xe4, 0xf5, 0x74, 0x63, 0x50, 0xfd, 0xed, 0x2e, 0x80, 0xbc, 0xc2, 0x12, 0xb2, 0x60, 0x3a,
	0x2c, 0x60, 0x25, 0x51, 0x63, 0x5b, 0xa2, 0x4a, 0xd8, 0xe6, 0x96, 0xb0, 0xee, 0x5b, 0xe8, 0xbd,
	0x48, 0x30, 0x94, 0xb8, 0xcd, 0xf7, 0x08, 0x4e, 0x34, 0xb8, 0x22, 0x3b, 0xf0, 0xfe, 0xf2, 0xe7,
	0x0c, 0xf1, 0x3d, 0x9f, 0x5d, 0x25, 0xe2, 0x63, 0xe8, 0xbd, 0xc4, 0x25, 0xee, 0x22, 0x1e, 0xd2,
	0x64, 0xfc, 0xf7, 0x08, 0x6e, 0xea, 0xa6, 0x77, 0x98, 0x5c, 0xd2, 0x08, 0xc9, 0x25, 0xdc, 0xd8,
	0xb0, 0x8c, 0xdc, 0x37, 0xbc, 0xc2, 0x64, 0xb6, 0x33, 0x3a, 0xfc, 0x63, 0xee, 0xbe, 0x4b, 0xbe,
	0xff, 0xfe, 0xf3, 0xb3, 0x71, 0x9d, 0x80, 0x5f, 0xda, 0x4a, 0x04, 0x74, 0x6a, 0xb6, 0x92, 0x7b,
	0x06, 0xb0, 0x5d, 0xdb, 0x9d, 0x7d, 0x12, 0xb9, 0x43, 0x45, 0xe3, 0x10, 0xbb, 0xa2, 0xf1, 0xbf,
	0xd6, 0x14, 0xf9, 0x46, 0x52, 0xe8, 0x6e, 0xda, 0x4b, 0x4c, 0x43, 0x18, 0x37, 0x60, 0x3f, 0xf5,
	0x40, 0x51, 0xf7, 0xdd, 0xda, 0x84, 0x4f, 0x4b, 0xc7, 0xc8, 0x0f, 0x0b, 0xba, 0x9b, 0x4b, 0x60,
	0xe4, 0x35, 0xee, 0xc9, 0x7e, 0xde, 0x89, 0xe2, 0x3d, 0x1b, 0xdf, 0x35, 0x8d, 0xec, 0xd5, 0x67,
	0xaf, 0x3d, 0x47, 0x42, 0x77, 0x73, 0x81, 0x8c, 0xaf, 0x31, 0xee, 0x98, 0xd3, 0xf7, 0xf2, 0x1b,
	0xe7, 0xe9, 0x1b, 0xe7, 0x9d, 0x67, 0x37, 0x4e, 0x6b, 0xff, 0xe0, 0xbf, 0xda, 0x3f, 0x7f, 0xf8,
	0x61, 0x32, 0xa7, 0xf2, 0x53, 0x3a, 0xf5, 0x22, 0xb6, 0xf2, 0x35, 0xdf, 0x19, 0x65, 0xe5, 0xb7,
	0xaf, 0xb9, 0xb3, 0xf3, 0xfa, 0x2c, 0xe4, 0xf4, 0x82, 0x4f, 0xa7, 0x2d, 0x45, 0x34, 0xf9, 0x17,
	0x00, 0x00, 0xff, 0xff, 0xb1, 0x98, 0x72, 0x60, 0x9d, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EuropeanServiceClient is the client API for EuropeanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EuropeanServiceClient interface {
	ListEuropeans(ctx context.Context, in *ListEuropeansRequest, opts ...grpc.CallOption) (*ListEuropeansResponse, error)
	GetEuropean(ctx context.Context, in *GetEuropeanRequest, opts ...grpc.CallOption) (*European, error)
	CreateEuropean(ctx context.Context, in *CreateEuropeanRequest, opts ...grpc.CallOption) (*European, error)
	UpdateEuropean(ctx context.Context, in *UpdateEuropeanRequest, opts ...grpc.CallOption) (*European, error)
	DeleteEuropean(ctx context.Context, in *DeleteEuropeanRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type europeanServiceClient struct {
	cc *grpc.ClientConn
}

func NewEuropeanServiceClient(cc *grpc.ClientConn) EuropeanServiceClient {
	return &europeanServiceClient{cc}
}

func (c *europeanServiceClient) ListEuropeans(ctx context.Context, in *ListEuropeansRequest, opts ...grpc.CallOption) (*ListEuropeansResponse, error) {
	out := new(ListEuropeansResponse)
	err := c.cc.Invoke(ctx, "/gooption.contract.EuropeanService/ListEuropeans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *europeanServiceClient) GetEuropean(ctx context.Context, in *GetEuropeanRequest, opts ...grpc.CallOption) (*European, error) {
	out := new(European)
	err := c.cc.Invoke(ctx, "/gooption.contract.EuropeanService/GetEuropean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *europeanServiceClient) CreateEuropean(ctx context.Context, in *CreateEuropeanRequest, opts ...grpc.CallOption) (*European, error) {
	out := new(European)
	err := c.cc.Invoke(ctx, "/gooption.contract.EuropeanService/CreateEuropean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *europeanServiceClient) UpdateEuropean(ctx context.Context, in *UpdateEuropeanRequest, opts ...grpc.CallOption) (*European, error) {
	out := new(European)
	err := c.cc.Invoke(ctx, "/gooption.contract.EuropeanService/UpdateEuropean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *europeanServiceClient) DeleteEuropean(ctx context.Context, in *DeleteEuropeanRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gooption.contract.EuropeanService/DeleteEuropean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EuropeanServiceServer is the server API for EuropeanService service.
type EuropeanServiceServer interface {
	ListEuropeans(context.Context, *ListEuropeansRequest) (*ListEuropeansResponse, error)
	GetEuropean(context.Context, *GetEuropeanRequest) (*European, error)
	CreateEuropean(context.Context, *CreateEuropeanRequest) (*European, error)
	UpdateEuropean(context.Context, *UpdateEuropeanRequest) (*European, error)
	DeleteEuropean(context.Context, *DeleteEuropeanRequest) (*empty.Empty, error)
}

// UnimplementedEuropeanServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEuropeanServiceServer struct {
}

func (*UnimplementedEuropeanServiceServer) ListEuropeans(ctx context.Context, req *ListEuropeansRequest) (*ListEuropeansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEuropeans not implemented")
}
func (*UnimplementedEuropeanServiceServer) GetEuropean(ctx context.Context, req *GetEuropeanRequest) (*European, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEuropean not implemented")
}
func (*UnimplementedEuropeanServiceServer) CreateEuropean(ctx context.Context, req *CreateEuropeanRequest) (*European, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEuropean not implemented")
}
func (*UnimplementedEuropeanServiceServer) UpdateEuropean(ctx context.Context, req *UpdateEuropeanRequest) (*European, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEuropean not implemented")
}
func (*UnimplementedEuropeanServiceServer) DeleteEuropean(ctx context.Context, req *DeleteEuropeanRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEuropean not implemented")
}

func RegisterEuropeanServiceServer(s *grpc.Server, srv EuropeanServiceServer) {
	s.RegisterService(&_EuropeanService_serviceDesc, srv)
}

func _EuropeanService_ListEuropeans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEuropeansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EuropeanServiceServer).ListEuropeans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooption.contract.EuropeanService/ListEuropeans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EuropeanServiceServer).ListEuropeans(ctx, req.(*ListEuropeansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EuropeanService_GetEuropean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEuropeanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EuropeanServiceServer).GetEuropean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooption.contract.EuropeanService/GetEuropean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EuropeanServiceServer).GetEuropean(ctx, req.(*GetEuropeanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EuropeanService_CreateEuropean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEuropeanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EuropeanServiceServer).CreateEuropean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooption.contract.EuropeanService/CreateEuropean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EuropeanServiceServer).CreateEuropean(ctx, req.(*CreateEuropeanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EuropeanService_UpdateEuropean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEuropeanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EuropeanServiceServer).UpdateEuropean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooption.contract.EuropeanService/UpdateEuropean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EuropeanServiceServer).UpdateEuropean(ctx, req.(*UpdateEuropeanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EuropeanService_DeleteEuropean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEuropeanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EuropeanServiceServer).DeleteEuropean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooption.contract.EuropeanService/DeleteEuropean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EuropeanServiceServer).DeleteEuropean(ctx, req.(*DeleteEuropeanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EuropeanService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gooption.contract.EuropeanService",
	HandlerType: (*EuropeanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEuropeans",
			Handler:    _EuropeanService_ListEuropeans_Handler,
		},
		{
			MethodName: "GetEuropean",
			Handler:    _EuropeanService_GetEuropean_Handler,
		},
		{
			MethodName: "CreateEuropean",
			Handler:    _EuropeanService_CreateEuropean_Handler,
		},
		{
			MethodName: "UpdateEuropean",
			Handler:    _EuropeanService_UpdateEuropean_Handler,
		},
		{
			MethodName: "DeleteEuropean",
			Handler:    _EuropeanService_DeleteEuropean_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "european.proto",
}
