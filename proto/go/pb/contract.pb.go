// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: contract.proto

package pb

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type European struct {
	Timestamp float64 `protobuf:"fixed64,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Ticker    string  `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Undticker string  `protobuf:"bytes,3,opt,name=undticker,proto3" json:"undticker,omitempty"`
	Strike    float64 `protobuf:"fixed64,4,opt,name=strike,proto3" json:"strike,omitempty"`
	Expiry    float64 `protobuf:"fixed64,5,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Putcall   string  `protobuf:"bytes,6,opt,name=putcall,proto3" json:"putcall,omitempty"`
}

func (m *European) Reset()                    { *m = European{} }
func (m *European) String() string            { return proto1.CompactTextString(m) }
func (*European) ProtoMessage()               {}
func (*European) Descriptor() ([]byte, []int) { return fileDescriptorContract, []int{0} }

func (m *European) GetTimestamp() float64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *European) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *European) GetUndticker() string {
	if m != nil {
		return m.Undticker
	}
	return ""
}

func (m *European) GetStrike() float64 {
	if m != nil {
		return m.Strike
	}
	return 0
}

func (m *European) GetExpiry() float64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *European) GetPutcall() string {
	if m != nil {
		return m.Putcall
	}
	return ""
}

func init() {
	proto1.RegisterType((*European)(nil), "proto.European")
}
func (this *European) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*European)
	if !ok {
		that2, ok := that.(European)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *European")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *European but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *European but is not nil && this == nil")
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if this.Ticker != that1.Ticker {
		return fmt.Errorf("Ticker this(%v) Not Equal that(%v)", this.Ticker, that1.Ticker)
	}
	if this.Undticker != that1.Undticker {
		return fmt.Errorf("Undticker this(%v) Not Equal that(%v)", this.Undticker, that1.Undticker)
	}
	if this.Strike != that1.Strike {
		return fmt.Errorf("Strike this(%v) Not Equal that(%v)", this.Strike, that1.Strike)
	}
	if this.Expiry != that1.Expiry {
		return fmt.Errorf("Expiry this(%v) Not Equal that(%v)", this.Expiry, that1.Expiry)
	}
	if this.Putcall != that1.Putcall {
		return fmt.Errorf("Putcall this(%v) Not Equal that(%v)", this.Putcall, that1.Putcall)
	}
	return nil
}
func (this *European) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*European)
	if !ok {
		that2, ok := that.(European)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Ticker != that1.Ticker {
		return false
	}
	if this.Undticker != that1.Undticker {
		return false
	}
	if this.Strike != that1.Strike {
		return false
	}
	if this.Expiry != that1.Expiry {
		return false
	}
	if this.Putcall != that1.Putcall {
		return false
	}
	return true
}
func (m *European) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *European) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Timestamp))))
		i += 8
	}
	if len(m.Ticker) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintContract(dAtA, i, uint64(len(m.Ticker)))
		i += copy(dAtA[i:], m.Ticker)
	}
	if len(m.Undticker) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintContract(dAtA, i, uint64(len(m.Undticker)))
		i += copy(dAtA[i:], m.Undticker)
	}
	if m.Strike != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Strike))))
		i += 8
	}
	if m.Expiry != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Expiry))))
		i += 8
	}
	if len(m.Putcall) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintContract(dAtA, i, uint64(len(m.Putcall)))
		i += copy(dAtA[i:], m.Putcall)
	}
	return i, nil
}

func encodeVarintContract(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedEuropean(r randyContract, easy bool) *European {
	this := &European{}
	this.Timestamp = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	this.Ticker = string(randStringContract(r))
	this.Undticker = string(randStringContract(r))
	this.Strike = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Strike *= -1
	}
	this.Expiry = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Expiry *= -1
	}
	this.Putcall = string(randStringContract(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyContract interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneContract(r randyContract) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringContract(r randyContract) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneContract(r)
	}
	return string(tmps)
}
func randUnrecognizedContract(r randyContract, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldContract(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldContract(dAtA []byte, r randyContract, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateContract(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateContract(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateContract(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateContract(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateContract(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateContract(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateContract(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *European) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 9
	}
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.Undticker)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.Strike != 0 {
		n += 9
	}
	if m.Expiry != 0 {
		n += 9
	}
	l = len(m.Putcall)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func sovContract(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozContract(x uint64) (n int) {
	return sovContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *European) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: European: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: European: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Timestamp = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Undticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Undticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strike", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Strike = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Expiry = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Putcall", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Putcall = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthContract
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowContract
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipContract(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthContract = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContract   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("contract.proto", fileDescriptorContract) }

var fileDescriptorContract = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0x31, 0x4e, 0xc4, 0x30,
	0x10, 0x45, 0x35, 0xc0, 0x06, 0xd6, 0x05, 0x85, 0x0b, 0x64, 0x21, 0x34, 0x8a, 0xa8, 0xb6, 0x61,
	0xb7, 0xe0, 0x06, 0x48, 0x5c, 0x60, 0x6f, 0xe0, 0x18, 0x13, 0xac, 0xdd, 0xc4, 0x96, 0x77, 0x2c,
	0xc1, 0x8d, 0x72, 0x04, 0x4a, 0x4a, 0x4a, 0x8e, 0x90, 0xf8, 0x14, 0x94, 0x28, 0x93, 0xa0, 0x54,
	0xf6, 0x7b, 0x5f, 0xff, 0x4b, 0x23, 0xae, 0x8d, 0x6f, 0x29, 0x6a, 0x43, 0xdb, 0x10, 0x3d, 0x79,
	0xb9, 0xe2, 0xe7, 0xf6, 0xa1, 0x76, 0xf4, 0x96, 0xaa, 0xad, 0xf1, 0xcd, 0xae, 0xf6, 0xb5, 0xdf,
	0xb1, 0xae, 0xd2, 0x2b, 0x13, 0x03, 0xff, 0xa6, 0xd6, 0x7d, 0x07, 0xe2, 0xea, 0x39, 0x45, 0x1f,
	0xac, 0x6e, 0xe5, 0x9d, 0x58, 0x93, 0x6b, 0xec, 0x89, 0x74, 0x13, 0x14, 0x94, 0xb0, 0x81, 0xfd,
	0x22, 0xe4, 0x8d, 0x28, 0xc8, 0x99, 0x83, 0x8d, 0xea, 0xac, 0x84, 0xcd, 0x7a, 0x3f, 0xd3, 0xd8,
	0x4a, 0xed, 0xcb, 0x1c, 0x9d, 0x73, 0xb4, 0x88, 0xb1, 0x75, 0xa2, 0xe8, 0x0e, 0x56, 0x5d, 0xf0,
	0xe0, 0x4c, 0xa3, 0xb7, 0xef, 0xc1, 0xc5, 0x0f, 0xb5, 0x9a, 0xfc, 0x44, 0x52, 0x89, 0xcb, 0x90,
	0xc8, 0xe8, 0xe3, 0x51, 0x15, 0xbc, 0xf5, 0x8f, 0x4f, 0x65, 0x3f, 0x20, 0xfc, 0x0e, 0x08, 0x5d,
	0x46, 0xf8, 0xcc, 0x08, 0x5f, 0x19, 0xe1, 0x3b, 0x23, 0xfc, 0x64, 0x84, 0x3e, 0x23, 0x54, 0x05,
	0xdf, 0xf4, 0xf8, 0x17, 0x00, 0x00, 0xff, 0xff, 0x22, 0x87, 0xea, 0x5d, 0x1b, 0x01, 0x00, 0x00,
}
