// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PriceRequest struct {
	Pricingdate          float64       `protobuf:"fixed64,1,opt,name=pricingdate,proto3" json:"pricingdate,omitempty"`
	Contract             *European     `protobuf:"bytes,2,opt,name=contract" json:"contract,omitempty"`
	Marketdata           *OptionMarket `protobuf:"bytes,3,opt,name=marketdata" json:"marketdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PriceRequest) Reset()         { *m = PriceRequest{} }
func (m *PriceRequest) String() string { return proto.CompactTextString(m) }
func (*PriceRequest) ProtoMessage()    {}
func (*PriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_bf6d7f7ef5c233cc, []int{0}
}
func (m *PriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceRequest.Merge(dst, src)
}
func (m *PriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *PriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PriceRequest proto.InternalMessageInfo

func (m *PriceRequest) GetPricingdate() float64 {
	if m != nil {
		return m.Pricingdate
	}
	return 0
}

func (m *PriceRequest) GetContract() *European {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *PriceRequest) GetMarketdata() *OptionMarket {
	if m != nil {
		return m.Marketdata
	}
	return nil
}

type PriceResponse struct {
	Price                float64  `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Error                string   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PriceResponse) Reset()         { *m = PriceResponse{} }
func (m *PriceResponse) String() string { return proto.CompactTextString(m) }
func (*PriceResponse) ProtoMessage()    {}
func (*PriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_bf6d7f7ef5c233cc, []int{1}
}
func (m *PriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceResponse.Merge(dst, src)
}
func (m *PriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *PriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PriceResponse proto.InternalMessageInfo

func (m *PriceResponse) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *PriceResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GreekRequest struct {
	Request              *PriceRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Greek                []string      `protobuf:"bytes,2,rep,name=greek" json:"greek,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GreekRequest) Reset()         { *m = GreekRequest{} }
func (m *GreekRequest) String() string { return proto.CompactTextString(m) }
func (*GreekRequest) ProtoMessage()    {}
func (*GreekRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_bf6d7f7ef5c233cc, []int{2}
}
func (m *GreekRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GreekRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GreekRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GreekRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreekRequest.Merge(dst, src)
}
func (m *GreekRequest) XXX_Size() int {
	return m.Size()
}
func (m *GreekRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GreekRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GreekRequest proto.InternalMessageInfo

func (m *GreekRequest) GetRequest() *PriceRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *GreekRequest) GetGreek() []string {
	if m != nil {
		return m.Greek
	}
	return nil
}

type GreekResponse struct {
	Greeks               []*GreekResponse_Greek `protobuf:"bytes,1,rep,name=greeks" json:"greeks,omitempty"`
	Error                string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GreekResponse) Reset()         { *m = GreekResponse{} }
func (m *GreekResponse) String() string { return proto.CompactTextString(m) }
func (*GreekResponse) ProtoMessage()    {}
func (*GreekResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_bf6d7f7ef5c233cc, []int{3}
}
func (m *GreekResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GreekResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GreekResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GreekResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreekResponse.Merge(dst, src)
}
func (m *GreekResponse) XXX_Size() int {
	return m.Size()
}
func (m *GreekResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GreekResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GreekResponse proto.InternalMessageInfo

func (m *GreekResponse) GetGreeks() []*GreekResponse_Greek {
	if m != nil {
		return m.Greeks
	}
	return nil
}

func (m *GreekResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GreekResponse_Greek struct {
	Label                string   `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Value                float64  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Error                string   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GreekResponse_Greek) Reset()         { *m = GreekResponse_Greek{} }
func (m *GreekResponse_Greek) String() string { return proto.CompactTextString(m) }
func (*GreekResponse_Greek) ProtoMessage()    {}
func (*GreekResponse_Greek) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_bf6d7f7ef5c233cc, []int{3, 0}
}
func (m *GreekResponse_Greek) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GreekResponse_Greek) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GreekResponse_Greek.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GreekResponse_Greek) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreekResponse_Greek.Merge(dst, src)
}
func (m *GreekResponse_Greek) XXX_Size() int {
	return m.Size()
}
func (m *GreekResponse_Greek) XXX_DiscardUnknown() {
	xxx_messageInfo_GreekResponse_Greek.DiscardUnknown(m)
}

var xxx_messageInfo_GreekResponse_Greek proto.InternalMessageInfo

func (m *GreekResponse_Greek) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *GreekResponse_Greek) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *GreekResponse_Greek) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ImpliedVolRequest struct {
	Pricingdate          float64             `protobuf:"fixed64,1,opt,name=pricingdate,proto3" json:"pricingdate,omitempty"`
	Marketdata           *OptionMarket       `protobuf:"bytes,2,opt,name=marketdata" json:"marketdata,omitempty"`
	Quotes               []*OptionQuoteSlice `protobuf:"bytes,3,rep,name=quotes" json:"quotes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ImpliedVolRequest) Reset()         { *m = ImpliedVolRequest{} }
func (m *ImpliedVolRequest) String() string { return proto.CompactTextString(m) }
func (*ImpliedVolRequest) ProtoMessage()    {}
func (*ImpliedVolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_bf6d7f7ef5c233cc, []int{4}
}
func (m *ImpliedVolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImpliedVolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImpliedVolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ImpliedVolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImpliedVolRequest.Merge(dst, src)
}
func (m *ImpliedVolRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImpliedVolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImpliedVolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImpliedVolRequest proto.InternalMessageInfo

func (m *ImpliedVolRequest) GetPricingdate() float64 {
	if m != nil {
		return m.Pricingdate
	}
	return 0
}

func (m *ImpliedVolRequest) GetMarketdata() *OptionMarket {
	if m != nil {
		return m.Marketdata
	}
	return nil
}

func (m *ImpliedVolRequest) GetQuotes() []*OptionQuoteSlice {
	if m != nil {
		return m.Quotes
	}
	return nil
}

type ImpliedVolResponse struct {
	Volsurface           *ImpliedVolSurface `protobuf:"bytes,1,opt,name=volsurface" json:"volsurface,omitempty"`
	Error                string             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ImpliedVolResponse) Reset()         { *m = ImpliedVolResponse{} }
func (m *ImpliedVolResponse) String() string { return proto.CompactTextString(m) }
func (*ImpliedVolResponse) ProtoMessage()    {}
func (*ImpliedVolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_bf6d7f7ef5c233cc, []int{5}
}
func (m *ImpliedVolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImpliedVolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImpliedVolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ImpliedVolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImpliedVolResponse.Merge(dst, src)
}
func (m *ImpliedVolResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImpliedVolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImpliedVolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImpliedVolResponse proto.InternalMessageInfo

func (m *ImpliedVolResponse) GetVolsurface() *ImpliedVolSurface {
	if m != nil {
		return m.Volsurface
	}
	return nil
}

func (m *ImpliedVolResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*PriceRequest)(nil), "pb.PriceRequest")
	proto.RegisterType((*PriceResponse)(nil), "pb.PriceResponse")
	proto.RegisterType((*GreekRequest)(nil), "pb.GreekRequest")
	proto.RegisterType((*GreekResponse)(nil), "pb.GreekResponse")
	proto.RegisterType((*GreekResponse_Greek)(nil), "pb.GreekResponse.Greek")
	proto.RegisterType((*ImpliedVolRequest)(nil), "pb.ImpliedVolRequest")
	proto.RegisterType((*ImpliedVolResponse)(nil), "pb.ImpliedVolResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EuropeanOptionPricerClient is the client API for EuropeanOptionPricer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EuropeanOptionPricerClient interface {
	Price(ctx context.Context, in *PriceRequest, opts ...grpc.CallOption) (*PriceResponse, error)
	Greek(ctx context.Context, in *GreekRequest, opts ...grpc.CallOption) (*GreekResponse, error)
	ImpliedVol(ctx context.Context, in *ImpliedVolRequest, opts ...grpc.CallOption) (*ImpliedVolResponse, error)
}

type europeanOptionPricerClient struct {
	cc *grpc.ClientConn
}

func NewEuropeanOptionPricerClient(cc *grpc.ClientConn) EuropeanOptionPricerClient {
	return &europeanOptionPricerClient{cc}
}

func (c *europeanOptionPricerClient) Price(ctx context.Context, in *PriceRequest, opts ...grpc.CallOption) (*PriceResponse, error) {
	out := new(PriceResponse)
	err := c.cc.Invoke(ctx, "/pb.EuropeanOptionPricer/Price", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *europeanOptionPricerClient) Greek(ctx context.Context, in *GreekRequest, opts ...grpc.CallOption) (*GreekResponse, error) {
	out := new(GreekResponse)
	err := c.cc.Invoke(ctx, "/pb.EuropeanOptionPricer/Greek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *europeanOptionPricerClient) ImpliedVol(ctx context.Context, in *ImpliedVolRequest, opts ...grpc.CallOption) (*ImpliedVolResponse, error) {
	out := new(ImpliedVolResponse)
	err := c.cc.Invoke(ctx, "/pb.EuropeanOptionPricer/ImpliedVol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EuropeanOptionPricerServer is the server API for EuropeanOptionPricer service.
type EuropeanOptionPricerServer interface {
	Price(context.Context, *PriceRequest) (*PriceResponse, error)
	Greek(context.Context, *GreekRequest) (*GreekResponse, error)
	ImpliedVol(context.Context, *ImpliedVolRequest) (*ImpliedVolResponse, error)
}

func RegisterEuropeanOptionPricerServer(s *grpc.Server, srv EuropeanOptionPricerServer) {
	s.RegisterService(&_EuropeanOptionPricer_serviceDesc, srv)
}

func _EuropeanOptionPricer_Price_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EuropeanOptionPricerServer).Price(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EuropeanOptionPricer/Price",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EuropeanOptionPricerServer).Price(ctx, req.(*PriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EuropeanOptionPricer_Greek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EuropeanOptionPricerServer).Greek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EuropeanOptionPricer/Greek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EuropeanOptionPricerServer).Greek(ctx, req.(*GreekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EuropeanOptionPricer_ImpliedVol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImpliedVolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EuropeanOptionPricerServer).ImpliedVol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EuropeanOptionPricer/ImpliedVol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EuropeanOptionPricerServer).ImpliedVol(ctx, req.(*ImpliedVolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EuropeanOptionPricer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.EuropeanOptionPricer",
	HandlerType: (*EuropeanOptionPricerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Price",
			Handler:    _EuropeanOptionPricer_Price_Handler,
		},
		{
			MethodName: "Greek",
			Handler:    _EuropeanOptionPricer_Greek_Handler,
		},
		{
			MethodName: "ImpliedVol",
			Handler:    _EuropeanOptionPricer_ImpliedVol_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func (m *PriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pricingdate != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Pricingdate))))
		i += 8
	}
	if m.Contract != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Contract.Size()))
		n1, err := m.Contract.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Marketdata != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Marketdata.Size()))
		n2, err := m.Marketdata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i += 8
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GreekRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreekRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Request.Size()))
		n3, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Greek) > 0 {
		for _, s := range m.Greek {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GreekResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreekResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Greeks) > 0 {
		for _, msg := range m.Greeks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GreekResponse_Greek) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreekResponse_Greek) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if m.Value != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i += 8
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ImpliedVolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImpliedVolRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pricingdate != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Pricingdate))))
		i += 8
	}
	if m.Marketdata != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Marketdata.Size()))
		n4, err := m.Marketdata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Quotes) > 0 {
		for _, msg := range m.Quotes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ImpliedVolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImpliedVolResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Volsurface != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Volsurface.Size()))
		n5, err := m.Volsurface.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pricingdate != 0 {
		n += 9
	}
	if m.Contract != nil {
		l = m.Contract.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Marketdata != nil {
		l = m.Marketdata.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Price != 0 {
		n += 9
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GreekRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Greek) > 0 {
		for _, s := range m.Greek {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GreekResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Greeks) > 0 {
		for _, e := range m.Greeks {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GreekResponse_Greek) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImpliedVolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pricingdate != 0 {
		n += 9
	}
	if m.Marketdata != nil {
		l = m.Marketdata.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Quotes) > 0 {
		for _, e := range m.Quotes {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImpliedVolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Volsurface != nil {
		l = m.Volsurface.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pricingdate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Pricingdate = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contract == nil {
				m.Contract = &European{}
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marketdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Marketdata == nil {
				m.Marketdata = &OptionMarket{}
			}
			if err := m.Marketdata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GreekRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GreekRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GreekRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &PriceRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Greek", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Greek = append(m.Greek, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GreekResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GreekResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GreekResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Greeks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Greeks = append(m.Greeks, &GreekResponse_Greek{})
			if err := m.Greeks[len(m.Greeks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GreekResponse_Greek) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Greek: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Greek: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImpliedVolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImpliedVolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImpliedVolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pricingdate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Pricingdate = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marketdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Marketdata == nil {
				m.Marketdata = &OptionMarket{}
			}
			if err := m.Marketdata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quotes = append(m.Quotes, &OptionQuoteSlice{})
			if err := m.Quotes[len(m.Quotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImpliedVolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImpliedVolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImpliedVolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volsurface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Volsurface == nil {
				m.Volsurface = &ImpliedVolSurface{}
			}
			if err := m.Volsurface.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_bf6d7f7ef5c233cc) }

var fileDescriptor_service_bf6d7f7ef5c233cc = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6e, 0xd3, 0x40,
	0x14, 0xee, 0x38, 0x4a, 0xa0, 0x2f, 0x09, 0x4a, 0x47, 0x01, 0xac, 0x2c, 0x22, 0xcb, 0x2b, 0x0b,
	0x21, 0x83, 0x82, 0x58, 0x21, 0x36, 0x48, 0x08, 0x75, 0x81, 0x28, 0x53, 0x89, 0xfd, 0xd8, 0x79,
	0x54, 0x56, 0x5d, 0xcf, 0x74, 0x3c, 0xce, 0x29, 0xd8, 0x72, 0x00, 0x0e, 0xc1, 0x1d, 0x58, 0x72,
	0x04, 0x94, 0x93, 0xa0, 0xf9, 0x71, 0x3d, 0x29, 0x20, 0xba, 0x9b, 0xf7, 0xbd, 0x6f, 0xbe, 0xf7,
	0xbd, 0xf9, 0x6c, 0x98, 0xb7, 0xa8, 0x76, 0x55, 0x89, 0xb9, 0x54, 0x42, 0x0b, 0x1a, 0xc9, 0x62,
	0xf5, 0xa0, 0x14, 0x8d, 0x56, 0xbc, 0xd4, 0x0e, 0x5b, 0x2d, 0xae, 0xb8, 0xba, 0x44, 0xbd, 0xe5,
	0x9a, 0x3b, 0x24, 0xfd, 0x42, 0x60, 0x76, 0xa6, 0xaa, 0x12, 0x19, 0x5e, 0x77, 0xd8, 0x6a, 0x9a,
	0xc0, 0x54, 0xaa, 0xaa, 0xac, 0x9a, 0x8b, 0x2d, 0xd7, 0x18, 0x93, 0x84, 0x64, 0x84, 0x85, 0x10,
	0xcd, 0xe0, 0x7e, 0x2f, 0x1b, 0x47, 0x09, 0xc9, 0xa6, 0x9b, 0x59, 0x2e, 0x8b, 0xfc, 0x6d, 0xa7,
	0x84, 0x44, 0xde, 0xb0, 0x9b, 0x2e, 0x7d, 0x0e, 0x30, 0x0c, 0x8c, 0x47, 0x96, 0xbb, 0x30, 0xdc,
	0x0f, 0x52, 0x57, 0xa2, 0x79, 0x6f, 0x7b, 0x2c, 0xe0, 0xa4, 0xaf, 0x60, 0xee, 0xdd, 0xb4, 0x52,
	0x34, 0x2d, 0xd2, 0x25, 0x8c, 0xcd, 0x6c, 0xb4, 0x93, 0x08, 0x73, 0x85, 0x41, 0x51, 0x29, 0xa1,
	0xac, 0xe6, 0x31, 0x73, 0x45, 0x7a, 0x06, 0xb3, 0x77, 0x0a, 0xf1, 0xb2, 0x5f, 0xe5, 0x09, 0xdc,
	0x53, 0xee, 0x68, 0xd7, 0xf0, 0xb3, 0xc3, 0x6d, 0x59, 0x4f, 0x30, 0x8a, 0x17, 0xe6, 0x6e, 0x1c,
	0x25, 0x23, 0xa3, 0x68, 0x8b, 0xf4, 0x1b, 0x81, 0xb9, 0x97, 0xf4, 0x7e, 0x9e, 0xc1, 0xc4, 0xb6,
	0xda, 0x98, 0x24, 0xa3, 0x6c, 0xba, 0x79, 0x6c, 0x24, 0x0f, 0x28, 0xbe, 0xf2, 0xb4, 0xc1, 0x6a,
	0x14, 0x58, 0x5d, 0x9d, 0xc2, 0xd8, 0xd2, 0x4c, 0xbb, 0xe6, 0x05, 0xd6, 0xd6, 0xe1, 0x31, 0x73,
	0x85, 0x41, 0x77, 0xbc, 0xee, 0x6e, 0xb6, 0xb6, 0xc5, 0x3f, 0xb6, 0xfe, 0x4a, 0xe0, 0xe4, 0xf4,
	0x4a, 0xd6, 0x15, 0x6e, 0x3f, 0x89, 0xfa, 0xee, 0x31, 0x1e, 0x86, 0x13, 0xfd, 0x3f, 0x1c, 0xfa,
	0x14, 0x26, 0xd7, 0x9d, 0xd0, 0xd8, 0xc6, 0x23, 0xbb, 0xfb, 0x72, 0x60, 0x7f, 0x34, 0xf8, 0x79,
	0x6d, 0x5e, 0xd6, 0x73, 0x52, 0x0e, 0x34, 0xb4, 0xe5, 0xdf, 0xef, 0x25, 0xc0, 0x4e, 0xd4, 0x6d,
	0xa7, 0x3e, 0xf3, 0x12, 0x7d, 0x2c, 0x0f, 0x8d, 0xce, 0xc0, 0x3d, 0x77, 0x4d, 0x16, 0x10, 0xff,
	0xfe, 0x8a, 0x9b, 0xef, 0x04, 0x96, 0xfd, 0x67, 0xe7, 0x7c, 0xd8, 0x70, 0x15, 0xcd, 0x61, 0x6c,
	0x4f, 0xf4, 0x8f, 0xc4, 0x57, 0x27, 0x01, 0xe2, 0x3c, 0xa5, 0x47, 0x86, 0xef, 0xe2, 0x58, 0x04,
	0x71, 0x06, 0xfc, 0x83, 0x80, 0xd3, 0x23, 0xfa, 0x1a, 0x60, 0xf0, 0x4b, 0x6f, 0xf9, 0xef, 0x6f,
	0x3e, 0xba, 0x0d, 0xf7, 0xd7, 0xdf, 0xcc, 0x7e, 0xec, 0xd7, 0xe4, 0xe7, 0x7e, 0x4d, 0x7e, 0xed,
	0xd7, 0xa4, 0x98, 0xd8, 0x3f, 0xf1, 0xc5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x1a, 0x25,
	0xf2, 0xc0, 0x03, 0x00, 0x00,
}
