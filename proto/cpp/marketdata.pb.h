// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marketdata.proto

#ifndef PROTOBUF_INCLUDED_marketdata_2eproto
#define PROTOBUF_INCLUDED_marketdata_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_marketdata_2eproto 

namespace protobuf_marketdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_marketdata_2eproto
namespace proto {
class FlatVol;
class FlatVolDefaultTypeInternal;
extern FlatVolDefaultTypeInternal _FlatVol_default_instance_;
class ImpliedVolQuote;
class ImpliedVolQuoteDefaultTypeInternal;
extern ImpliedVolQuoteDefaultTypeInternal _ImpliedVolQuote_default_instance_;
class ImpliedVolSlice;
class ImpliedVolSliceDefaultTypeInternal;
extern ImpliedVolSliceDefaultTypeInternal _ImpliedVolSlice_default_instance_;
class ImpliedVolSurface;
class ImpliedVolSurfaceDefaultTypeInternal;
extern ImpliedVolSurfaceDefaultTypeInternal _ImpliedVolSurface_default_instance_;
class Index;
class IndexDefaultTypeInternal;
extern IndexDefaultTypeInternal _Index_default_instance_;
class OptionMarket;
class OptionMarketDefaultTypeInternal;
extern OptionMarketDefaultTypeInternal _OptionMarket_default_instance_;
class OptionQuote;
class OptionQuoteDefaultTypeInternal;
extern OptionQuoteDefaultTypeInternal _OptionQuote_default_instance_;
class OptionQuoteSlice;
class OptionQuoteSliceDefaultTypeInternal;
extern OptionQuoteSliceDefaultTypeInternal _OptionQuoteSlice_default_instance_;
class RiskFreeRate;
class RiskFreeRateDefaultTypeInternal;
extern RiskFreeRateDefaultTypeInternal _RiskFreeRate_default_instance_;
class Spot;
class SpotDefaultTypeInternal;
extern SpotDefaultTypeInternal _Spot_default_instance_;
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::FlatVol* Arena::CreateMaybeMessage<::proto::FlatVol>(Arena*);
template<> ::proto::ImpliedVolQuote* Arena::CreateMaybeMessage<::proto::ImpliedVolQuote>(Arena*);
template<> ::proto::ImpliedVolSlice* Arena::CreateMaybeMessage<::proto::ImpliedVolSlice>(Arena*);
template<> ::proto::ImpliedVolSurface* Arena::CreateMaybeMessage<::proto::ImpliedVolSurface>(Arena*);
template<> ::proto::Index* Arena::CreateMaybeMessage<::proto::Index>(Arena*);
template<> ::proto::OptionMarket* Arena::CreateMaybeMessage<::proto::OptionMarket>(Arena*);
template<> ::proto::OptionQuote* Arena::CreateMaybeMessage<::proto::OptionQuote>(Arena*);
template<> ::proto::OptionQuoteSlice* Arena::CreateMaybeMessage<::proto::OptionQuoteSlice>(Arena*);
template<> ::proto::RiskFreeRate* Arena::CreateMaybeMessage<::proto::RiskFreeRate>(Arena*);
template<> ::proto::Spot* Arena::CreateMaybeMessage<::proto::Spot>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {

// ===================================================================

class Index : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Index) */ {
 public:
  Index();
  virtual ~Index();

  Index(const Index& from);

  inline Index& operator=(const Index& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Index(Index&& from) noexcept
    : Index() {
    *this = ::std::move(from);
  }

  inline Index& operator=(Index&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Index& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Index* internal_default_instance() {
    return reinterpret_cast<const Index*>(
               &_Index_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Index* other);
  friend void swap(Index& a, Index& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Index* New() const final {
    return CreateMaybeMessage<Index>(NULL);
  }

  Index* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Index>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Index& from);
  void MergeFrom(const Index& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Index* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ticker = 2;
  void clear_ticker();
  static const int kTickerFieldNumber = 2;
  const ::std::string& ticker() const;
  void set_ticker(const ::std::string& value);
  #if LANG_CXX11
  void set_ticker(::std::string&& value);
  #endif
  void set_ticker(const char* value);
  void set_ticker(const char* value, size_t size);
  ::std::string* mutable_ticker();
  ::std::string* release_ticker();
  void set_allocated_ticker(::std::string* ticker);

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // double value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  double value() const;
  void set_value(double value);

  // @@protoc_insertion_point(class_scope:proto.Index)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ticker_;
  double timestamp_;
  double value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_marketdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Spot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Spot) */ {
 public:
  Spot();
  virtual ~Spot();

  Spot(const Spot& from);

  inline Spot& operator=(const Spot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Spot(Spot&& from) noexcept
    : Spot() {
    *this = ::std::move(from);
  }

  inline Spot& operator=(Spot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Spot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Spot* internal_default_instance() {
    return reinterpret_cast<const Spot*>(
               &_Spot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Spot* other);
  friend void swap(Spot& a, Spot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Spot* New() const final {
    return CreateMaybeMessage<Spot>(NULL);
  }

  Spot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Spot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Spot& from);
  void MergeFrom(const Spot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Spot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Index index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  private:
  const ::proto::Index& _internal_index() const;
  public:
  const ::proto::Index& index() const;
  ::proto::Index* release_index();
  ::proto::Index* mutable_index();
  void set_allocated_index(::proto::Index* index);

  // @@protoc_insertion_point(class_scope:proto.Spot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Index* index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_marketdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RiskFreeRate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RiskFreeRate) */ {
 public:
  RiskFreeRate();
  virtual ~RiskFreeRate();

  RiskFreeRate(const RiskFreeRate& from);

  inline RiskFreeRate& operator=(const RiskFreeRate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RiskFreeRate(RiskFreeRate&& from) noexcept
    : RiskFreeRate() {
    *this = ::std::move(from);
  }

  inline RiskFreeRate& operator=(RiskFreeRate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskFreeRate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RiskFreeRate* internal_default_instance() {
    return reinterpret_cast<const RiskFreeRate*>(
               &_RiskFreeRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RiskFreeRate* other);
  friend void swap(RiskFreeRate& a, RiskFreeRate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RiskFreeRate* New() const final {
    return CreateMaybeMessage<RiskFreeRate>(NULL);
  }

  RiskFreeRate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RiskFreeRate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RiskFreeRate& from);
  void MergeFrom(const RiskFreeRate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RiskFreeRate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Index index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  private:
  const ::proto::Index& _internal_index() const;
  public:
  const ::proto::Index& index() const;
  ::proto::Index* release_index();
  ::proto::Index* mutable_index();
  void set_allocated_index(::proto::Index* index);

  // @@protoc_insertion_point(class_scope:proto.RiskFreeRate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Index* index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_marketdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlatVol : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FlatVol) */ {
 public:
  FlatVol();
  virtual ~FlatVol();

  FlatVol(const FlatVol& from);

  inline FlatVol& operator=(const FlatVol& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlatVol(FlatVol&& from) noexcept
    : FlatVol() {
    *this = ::std::move(from);
  }

  inline FlatVol& operator=(FlatVol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlatVol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlatVol* internal_default_instance() {
    return reinterpret_cast<const FlatVol*>(
               &_FlatVol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FlatVol* other);
  friend void swap(FlatVol& a, FlatVol& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlatVol* New() const final {
    return CreateMaybeMessage<FlatVol>(NULL);
  }

  FlatVol* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlatVol>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlatVol& from);
  void MergeFrom(const FlatVol& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlatVol* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Index index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  private:
  const ::proto::Index& _internal_index() const;
  public:
  const ::proto::Index& index() const;
  ::proto::Index* release_index();
  ::proto::Index* mutable_index();
  void set_allocated_index(::proto::Index* index);

  // @@protoc_insertion_point(class_scope:proto.FlatVol)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Index* index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_marketdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionQuote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.OptionQuote) */ {
 public:
  OptionQuote();
  virtual ~OptionQuote();

  OptionQuote(const OptionQuote& from);

  inline OptionQuote& operator=(const OptionQuote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionQuote(OptionQuote&& from) noexcept
    : OptionQuote() {
    *this = ::std::move(from);
  }

  inline OptionQuote& operator=(OptionQuote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionQuote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionQuote* internal_default_instance() {
    return reinterpret_cast<const OptionQuote*>(
               &_OptionQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(OptionQuote* other);
  friend void swap(OptionQuote& a, OptionQuote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionQuote* New() const final {
    return CreateMaybeMessage<OptionQuote>(NULL);
  }

  OptionQuote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionQuote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionQuote& from);
  void MergeFrom(const OptionQuote& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionQuote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string putcall = 13;
  void clear_putcall();
  static const int kPutcallFieldNumber = 13;
  const ::std::string& putcall() const;
  void set_putcall(const ::std::string& value);
  #if LANG_CXX11
  void set_putcall(::std::string&& value);
  #endif
  void set_putcall(const char* value);
  void set_putcall(const char* value, size_t size);
  ::std::string* mutable_putcall();
  ::std::string* release_putcall();
  void set_allocated_putcall(::std::string* putcall);

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // double strike = 8;
  void clear_strike();
  static const int kStrikeFieldNumber = 8;
  double strike() const;
  void set_strike(double value);

  // double bid = 9;
  void clear_bid();
  static const int kBidFieldNumber = 9;
  double bid() const;
  void set_bid(double value);

  // double ask = 10;
  void clear_ask();
  static const int kAskFieldNumber = 10;
  double ask() const;
  void set_ask(double value);

  // double volume = 11;
  void clear_volume();
  static const int kVolumeFieldNumber = 11;
  double volume() const;
  void set_volume(double value);

  // double openinterest = 12;
  void clear_openinterest();
  static const int kOpeninterestFieldNumber = 12;
  double openinterest() const;
  void set_openinterest(double value);

  // @@protoc_insertion_point(class_scope:proto.OptionQuote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr putcall_;
  double timestamp_;
  double strike_;
  double bid_;
  double ask_;
  double volume_;
  double openinterest_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_marketdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionQuoteSlice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.OptionQuoteSlice) */ {
 public:
  OptionQuoteSlice();
  virtual ~OptionQuoteSlice();

  OptionQuoteSlice(const OptionQuoteSlice& from);

  inline OptionQuoteSlice& operator=(const OptionQuoteSlice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionQuoteSlice(OptionQuoteSlice&& from) noexcept
    : OptionQuoteSlice() {
    *this = ::std::move(from);
  }

  inline OptionQuoteSlice& operator=(OptionQuoteSlice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionQuoteSlice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionQuoteSlice* internal_default_instance() {
    return reinterpret_cast<const OptionQuoteSlice*>(
               &_OptionQuoteSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(OptionQuoteSlice* other);
  friend void swap(OptionQuoteSlice& a, OptionQuoteSlice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionQuoteSlice* New() const final {
    return CreateMaybeMessage<OptionQuoteSlice>(NULL);
  }

  OptionQuoteSlice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionQuoteSlice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionQuoteSlice& from);
  void MergeFrom(const OptionQuoteSlice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionQuoteSlice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.OptionQuote puts = 3;
  int puts_size() const;
  void clear_puts();
  static const int kPutsFieldNumber = 3;
  ::proto::OptionQuote* mutable_puts(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::OptionQuote >*
      mutable_puts();
  const ::proto::OptionQuote& puts(int index) const;
  ::proto::OptionQuote* add_puts();
  const ::google::protobuf::RepeatedPtrField< ::proto::OptionQuote >&
      puts() const;

  // repeated .proto.OptionQuote calls = 4;
  int calls_size() const;
  void clear_calls();
  static const int kCallsFieldNumber = 4;
  ::proto::OptionQuote* mutable_calls(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::OptionQuote >*
      mutable_calls();
  const ::proto::OptionQuote& calls(int index) const;
  ::proto::OptionQuote* add_calls();
  const ::google::protobuf::RepeatedPtrField< ::proto::OptionQuote >&
      calls() const;

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // double expiry = 2;
  void clear_expiry();
  static const int kExpiryFieldNumber = 2;
  double expiry() const;
  void set_expiry(double value);

  // @@protoc_insertion_point(class_scope:proto.OptionQuoteSlice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::OptionQuote > puts_;
  ::google::protobuf::RepeatedPtrField< ::proto::OptionQuote > calls_;
  double timestamp_;
  double expiry_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_marketdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionMarket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.OptionMarket) */ {
 public:
  OptionMarket();
  virtual ~OptionMarket();

  OptionMarket(const OptionMarket& from);

  inline OptionMarket& operator=(const OptionMarket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionMarket(OptionMarket&& from) noexcept
    : OptionMarket() {
    *this = ::std::move(from);
  }

  inline OptionMarket& operator=(OptionMarket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionMarket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionMarket* internal_default_instance() {
    return reinterpret_cast<const OptionMarket*>(
               &_OptionMarket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(OptionMarket* other);
  friend void swap(OptionMarket& a, OptionMarket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionMarket* New() const final {
    return CreateMaybeMessage<OptionMarket>(NULL);
  }

  OptionMarket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionMarket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionMarket& from);
  void MergeFrom(const OptionMarket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionMarket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Spot spot = 2;
  bool has_spot() const;
  void clear_spot();
  static const int kSpotFieldNumber = 2;
  private:
  const ::proto::Spot& _internal_spot() const;
  public:
  const ::proto::Spot& spot() const;
  ::proto::Spot* release_spot();
  ::proto::Spot* mutable_spot();
  void set_allocated_spot(::proto::Spot* spot);

  // .proto.FlatVol vol = 3;
  bool has_vol() const;
  void clear_vol();
  static const int kVolFieldNumber = 3;
  private:
  const ::proto::FlatVol& _internal_vol() const;
  public:
  const ::proto::FlatVol& vol() const;
  ::proto::FlatVol* release_vol();
  ::proto::FlatVol* mutable_vol();
  void set_allocated_vol(::proto::FlatVol* vol);

  // .proto.RiskFreeRate rate = 4;
  bool has_rate() const;
  void clear_rate();
  static const int kRateFieldNumber = 4;
  private:
  const ::proto::RiskFreeRate& _internal_rate() const;
  public:
  const ::proto::RiskFreeRate& rate() const;
  ::proto::RiskFreeRate* release_rate();
  ::proto::RiskFreeRate* mutable_rate();
  void set_allocated_rate(::proto::RiskFreeRate* rate);

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:proto.OptionMarket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Spot* spot_;
  ::proto::FlatVol* vol_;
  ::proto::RiskFreeRate* rate_;
  double timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_marketdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImpliedVolQuote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ImpliedVolQuote) */ {
 public:
  ImpliedVolQuote();
  virtual ~ImpliedVolQuote();

  ImpliedVolQuote(const ImpliedVolQuote& from);

  inline ImpliedVolQuote& operator=(const ImpliedVolQuote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImpliedVolQuote(ImpliedVolQuote&& from) noexcept
    : ImpliedVolQuote() {
    *this = ::std::move(from);
  }

  inline ImpliedVolQuote& operator=(ImpliedVolQuote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImpliedVolQuote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImpliedVolQuote* internal_default_instance() {
    return reinterpret_cast<const ImpliedVolQuote*>(
               &_ImpliedVolQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ImpliedVolQuote* other);
  friend void swap(ImpliedVolQuote& a, ImpliedVolQuote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImpliedVolQuote* New() const final {
    return CreateMaybeMessage<ImpliedVolQuote>(NULL);
  }

  ImpliedVolQuote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImpliedVolQuote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImpliedVolQuote& from);
  void MergeFrom(const ImpliedVolQuote& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImpliedVolQuote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error = 3;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // .proto.OptionQuote input = 2;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 2;
  private:
  const ::proto::OptionQuote& _internal_input() const;
  public:
  const ::proto::OptionQuote& input() const;
  ::proto::OptionQuote* release_input();
  ::proto::OptionQuote* mutable_input();
  void set_allocated_input(::proto::OptionQuote* input);

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // double vol = 4;
  void clear_vol();
  static const int kVolFieldNumber = 4;
  double vol() const;
  void set_vol(double value);

  // int64 nbiteration = 5;
  void clear_nbiteration();
  static const int kNbiterationFieldNumber = 5;
  ::google::protobuf::int64 nbiteration() const;
  void set_nbiteration(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto.ImpliedVolQuote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::proto::OptionQuote* input_;
  double timestamp_;
  double vol_;
  ::google::protobuf::int64 nbiteration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_marketdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImpliedVolSlice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ImpliedVolSlice) */ {
 public:
  ImpliedVolSlice();
  virtual ~ImpliedVolSlice();

  ImpliedVolSlice(const ImpliedVolSlice& from);

  inline ImpliedVolSlice& operator=(const ImpliedVolSlice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImpliedVolSlice(ImpliedVolSlice&& from) noexcept
    : ImpliedVolSlice() {
    *this = ::std::move(from);
  }

  inline ImpliedVolSlice& operator=(ImpliedVolSlice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImpliedVolSlice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImpliedVolSlice* internal_default_instance() {
    return reinterpret_cast<const ImpliedVolSlice*>(
               &_ImpliedVolSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ImpliedVolSlice* other);
  friend void swap(ImpliedVolSlice& a, ImpliedVolSlice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImpliedVolSlice* New() const final {
    return CreateMaybeMessage<ImpliedVolSlice>(NULL);
  }

  ImpliedVolSlice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImpliedVolSlice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImpliedVolSlice& from);
  void MergeFrom(const ImpliedVolSlice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImpliedVolSlice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ImpliedVolQuote quotes = 4;
  int quotes_size() const;
  void clear_quotes();
  static const int kQuotesFieldNumber = 4;
  ::proto::ImpliedVolQuote* mutable_quotes(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::ImpliedVolQuote >*
      mutable_quotes();
  const ::proto::ImpliedVolQuote& quotes(int index) const;
  ::proto::ImpliedVolQuote* add_quotes();
  const ::google::protobuf::RepeatedPtrField< ::proto::ImpliedVolQuote >&
      quotes() const;

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // double expiry = 3;
  void clear_expiry();
  static const int kExpiryFieldNumber = 3;
  double expiry() const;
  void set_expiry(double value);

  // bool iserror = 2;
  void clear_iserror();
  static const int kIserrorFieldNumber = 2;
  bool iserror() const;
  void set_iserror(bool value);

  // @@protoc_insertion_point(class_scope:proto.ImpliedVolSlice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ImpliedVolQuote > quotes_;
  double timestamp_;
  double expiry_;
  bool iserror_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_marketdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImpliedVolSurface : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ImpliedVolSurface) */ {
 public:
  ImpliedVolSurface();
  virtual ~ImpliedVolSurface();

  ImpliedVolSurface(const ImpliedVolSurface& from);

  inline ImpliedVolSurface& operator=(const ImpliedVolSurface& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImpliedVolSurface(ImpliedVolSurface&& from) noexcept
    : ImpliedVolSurface() {
    *this = ::std::move(from);
  }

  inline ImpliedVolSurface& operator=(ImpliedVolSurface&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImpliedVolSurface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImpliedVolSurface* internal_default_instance() {
    return reinterpret_cast<const ImpliedVolSurface*>(
               &_ImpliedVolSurface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ImpliedVolSurface* other);
  friend void swap(ImpliedVolSurface& a, ImpliedVolSurface& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImpliedVolSurface* New() const final {
    return CreateMaybeMessage<ImpliedVolSurface>(NULL);
  }

  ImpliedVolSurface* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImpliedVolSurface>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImpliedVolSurface& from);
  void MergeFrom(const ImpliedVolSurface& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImpliedVolSurface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ImpliedVolSlice slices = 2;
  int slices_size() const;
  void clear_slices();
  static const int kSlicesFieldNumber = 2;
  ::proto::ImpliedVolSlice* mutable_slices(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::ImpliedVolSlice >*
      mutable_slices();
  const ::proto::ImpliedVolSlice& slices(int index) const;
  ::proto::ImpliedVolSlice* add_slices();
  const ::google::protobuf::RepeatedPtrField< ::proto::ImpliedVolSlice >&
      slices() const;

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:proto.ImpliedVolSurface)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ImpliedVolSlice > slices_;
  double timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_marketdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Index

// double timestamp = 1;
inline void Index::clear_timestamp() {
  timestamp_ = 0;
}
inline double Index::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.Index.timestamp)
  return timestamp_;
}
inline void Index::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.Index.timestamp)
}

// string ticker = 2;
inline void Index::clear_ticker() {
  ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Index::ticker() const {
  // @@protoc_insertion_point(field_get:proto.Index.ticker)
  return ticker_.GetNoArena();
}
inline void Index::set_ticker(const ::std::string& value) {
  
  ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Index.ticker)
}
#if LANG_CXX11
inline void Index::set_ticker(::std::string&& value) {
  
  ticker_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Index.ticker)
}
#endif
inline void Index::set_ticker(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Index.ticker)
}
inline void Index::set_ticker(const char* value, size_t size) {
  
  ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Index.ticker)
}
inline ::std::string* Index::mutable_ticker() {
  
  // @@protoc_insertion_point(field_mutable:proto.Index.ticker)
  return ticker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Index::release_ticker() {
  // @@protoc_insertion_point(field_release:proto.Index.ticker)
  
  return ticker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Index::set_allocated_ticker(::std::string* ticker) {
  if (ticker != NULL) {
    
  } else {
    
  }
  ticker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticker);
  // @@protoc_insertion_point(field_set_allocated:proto.Index.ticker)
}

// double value = 3;
inline void Index::clear_value() {
  value_ = 0;
}
inline double Index::value() const {
  // @@protoc_insertion_point(field_get:proto.Index.value)
  return value_;
}
inline void Index::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.Index.value)
}

// -------------------------------------------------------------------

// Spot

// .proto.Index index = 1;
inline bool Spot::has_index() const {
  return this != internal_default_instance() && index_ != NULL;
}
inline void Spot::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) {
    delete index_;
  }
  index_ = NULL;
}
inline const ::proto::Index& Spot::_internal_index() const {
  return *index_;
}
inline const ::proto::Index& Spot::index() const {
  const ::proto::Index* p = index_;
  // @@protoc_insertion_point(field_get:proto.Spot.index)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Index*>(
      &::proto::_Index_default_instance_);
}
inline ::proto::Index* Spot::release_index() {
  // @@protoc_insertion_point(field_release:proto.Spot.index)
  
  ::proto::Index* temp = index_;
  index_ = NULL;
  return temp;
}
inline ::proto::Index* Spot::mutable_index() {
  
  if (index_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Index>(GetArenaNoVirtual());
    index_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.Spot.index)
  return index_;
}
inline void Spot::set_allocated_index(::proto::Index* index) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete index_;
  }
  if (index) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      index = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, index, submessage_arena);
    }
    
  } else {
    
  }
  index_ = index;
  // @@protoc_insertion_point(field_set_allocated:proto.Spot.index)
}

// -------------------------------------------------------------------

// RiskFreeRate

// .proto.Index index = 1;
inline bool RiskFreeRate::has_index() const {
  return this != internal_default_instance() && index_ != NULL;
}
inline void RiskFreeRate::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) {
    delete index_;
  }
  index_ = NULL;
}
inline const ::proto::Index& RiskFreeRate::_internal_index() const {
  return *index_;
}
inline const ::proto::Index& RiskFreeRate::index() const {
  const ::proto::Index* p = index_;
  // @@protoc_insertion_point(field_get:proto.RiskFreeRate.index)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Index*>(
      &::proto::_Index_default_instance_);
}
inline ::proto::Index* RiskFreeRate::release_index() {
  // @@protoc_insertion_point(field_release:proto.RiskFreeRate.index)
  
  ::proto::Index* temp = index_;
  index_ = NULL;
  return temp;
}
inline ::proto::Index* RiskFreeRate::mutable_index() {
  
  if (index_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Index>(GetArenaNoVirtual());
    index_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.RiskFreeRate.index)
  return index_;
}
inline void RiskFreeRate::set_allocated_index(::proto::Index* index) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete index_;
  }
  if (index) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      index = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, index, submessage_arena);
    }
    
  } else {
    
  }
  index_ = index;
  // @@protoc_insertion_point(field_set_allocated:proto.RiskFreeRate.index)
}

// -------------------------------------------------------------------

// FlatVol

// .proto.Index index = 1;
inline bool FlatVol::has_index() const {
  return this != internal_default_instance() && index_ != NULL;
}
inline void FlatVol::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) {
    delete index_;
  }
  index_ = NULL;
}
inline const ::proto::Index& FlatVol::_internal_index() const {
  return *index_;
}
inline const ::proto::Index& FlatVol::index() const {
  const ::proto::Index* p = index_;
  // @@protoc_insertion_point(field_get:proto.FlatVol.index)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Index*>(
      &::proto::_Index_default_instance_);
}
inline ::proto::Index* FlatVol::release_index() {
  // @@protoc_insertion_point(field_release:proto.FlatVol.index)
  
  ::proto::Index* temp = index_;
  index_ = NULL;
  return temp;
}
inline ::proto::Index* FlatVol::mutable_index() {
  
  if (index_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Index>(GetArenaNoVirtual());
    index_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.FlatVol.index)
  return index_;
}
inline void FlatVol::set_allocated_index(::proto::Index* index) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete index_;
  }
  if (index) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      index = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, index, submessage_arena);
    }
    
  } else {
    
  }
  index_ = index;
  // @@protoc_insertion_point(field_set_allocated:proto.FlatVol.index)
}

// -------------------------------------------------------------------

// OptionQuote

// double timestamp = 1;
inline void OptionQuote::clear_timestamp() {
  timestamp_ = 0;
}
inline double OptionQuote::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.OptionQuote.timestamp)
  return timestamp_;
}
inline void OptionQuote::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.OptionQuote.timestamp)
}

// double strike = 8;
inline void OptionQuote::clear_strike() {
  strike_ = 0;
}
inline double OptionQuote::strike() const {
  // @@protoc_insertion_point(field_get:proto.OptionQuote.strike)
  return strike_;
}
inline void OptionQuote::set_strike(double value) {
  
  strike_ = value;
  // @@protoc_insertion_point(field_set:proto.OptionQuote.strike)
}

// double bid = 9;
inline void OptionQuote::clear_bid() {
  bid_ = 0;
}
inline double OptionQuote::bid() const {
  // @@protoc_insertion_point(field_get:proto.OptionQuote.bid)
  return bid_;
}
inline void OptionQuote::set_bid(double value) {
  
  bid_ = value;
  // @@protoc_insertion_point(field_set:proto.OptionQuote.bid)
}

// double ask = 10;
inline void OptionQuote::clear_ask() {
  ask_ = 0;
}
inline double OptionQuote::ask() const {
  // @@protoc_insertion_point(field_get:proto.OptionQuote.ask)
  return ask_;
}
inline void OptionQuote::set_ask(double value) {
  
  ask_ = value;
  // @@protoc_insertion_point(field_set:proto.OptionQuote.ask)
}

// double volume = 11;
inline void OptionQuote::clear_volume() {
  volume_ = 0;
}
inline double OptionQuote::volume() const {
  // @@protoc_insertion_point(field_get:proto.OptionQuote.volume)
  return volume_;
}
inline void OptionQuote::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:proto.OptionQuote.volume)
}

// double openinterest = 12;
inline void OptionQuote::clear_openinterest() {
  openinterest_ = 0;
}
inline double OptionQuote::openinterest() const {
  // @@protoc_insertion_point(field_get:proto.OptionQuote.openinterest)
  return openinterest_;
}
inline void OptionQuote::set_openinterest(double value) {
  
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:proto.OptionQuote.openinterest)
}

// string putcall = 13;
inline void OptionQuote::clear_putcall() {
  putcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionQuote::putcall() const {
  // @@protoc_insertion_point(field_get:proto.OptionQuote.putcall)
  return putcall_.GetNoArena();
}
inline void OptionQuote::set_putcall(const ::std::string& value) {
  
  putcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.OptionQuote.putcall)
}
#if LANG_CXX11
inline void OptionQuote::set_putcall(::std::string&& value) {
  
  putcall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.OptionQuote.putcall)
}
#endif
inline void OptionQuote::set_putcall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  putcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.OptionQuote.putcall)
}
inline void OptionQuote::set_putcall(const char* value, size_t size) {
  
  putcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.OptionQuote.putcall)
}
inline ::std::string* OptionQuote::mutable_putcall() {
  
  // @@protoc_insertion_point(field_mutable:proto.OptionQuote.putcall)
  return putcall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionQuote::release_putcall() {
  // @@protoc_insertion_point(field_release:proto.OptionQuote.putcall)
  
  return putcall_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionQuote::set_allocated_putcall(::std::string* putcall) {
  if (putcall != NULL) {
    
  } else {
    
  }
  putcall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), putcall);
  // @@protoc_insertion_point(field_set_allocated:proto.OptionQuote.putcall)
}

// -------------------------------------------------------------------

// OptionQuoteSlice

// double timestamp = 1;
inline void OptionQuoteSlice::clear_timestamp() {
  timestamp_ = 0;
}
inline double OptionQuoteSlice::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.OptionQuoteSlice.timestamp)
  return timestamp_;
}
inline void OptionQuoteSlice::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.OptionQuoteSlice.timestamp)
}

// double expiry = 2;
inline void OptionQuoteSlice::clear_expiry() {
  expiry_ = 0;
}
inline double OptionQuoteSlice::expiry() const {
  // @@protoc_insertion_point(field_get:proto.OptionQuoteSlice.expiry)
  return expiry_;
}
inline void OptionQuoteSlice::set_expiry(double value) {
  
  expiry_ = value;
  // @@protoc_insertion_point(field_set:proto.OptionQuoteSlice.expiry)
}

// repeated .proto.OptionQuote puts = 3;
inline int OptionQuoteSlice::puts_size() const {
  return puts_.size();
}
inline void OptionQuoteSlice::clear_puts() {
  puts_.Clear();
}
inline ::proto::OptionQuote* OptionQuoteSlice::mutable_puts(int index) {
  // @@protoc_insertion_point(field_mutable:proto.OptionQuoteSlice.puts)
  return puts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::OptionQuote >*
OptionQuoteSlice::mutable_puts() {
  // @@protoc_insertion_point(field_mutable_list:proto.OptionQuoteSlice.puts)
  return &puts_;
}
inline const ::proto::OptionQuote& OptionQuoteSlice::puts(int index) const {
  // @@protoc_insertion_point(field_get:proto.OptionQuoteSlice.puts)
  return puts_.Get(index);
}
inline ::proto::OptionQuote* OptionQuoteSlice::add_puts() {
  // @@protoc_insertion_point(field_add:proto.OptionQuoteSlice.puts)
  return puts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::OptionQuote >&
OptionQuoteSlice::puts() const {
  // @@protoc_insertion_point(field_list:proto.OptionQuoteSlice.puts)
  return puts_;
}

// repeated .proto.OptionQuote calls = 4;
inline int OptionQuoteSlice::calls_size() const {
  return calls_.size();
}
inline void OptionQuoteSlice::clear_calls() {
  calls_.Clear();
}
inline ::proto::OptionQuote* OptionQuoteSlice::mutable_calls(int index) {
  // @@protoc_insertion_point(field_mutable:proto.OptionQuoteSlice.calls)
  return calls_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::OptionQuote >*
OptionQuoteSlice::mutable_calls() {
  // @@protoc_insertion_point(field_mutable_list:proto.OptionQuoteSlice.calls)
  return &calls_;
}
inline const ::proto::OptionQuote& OptionQuoteSlice::calls(int index) const {
  // @@protoc_insertion_point(field_get:proto.OptionQuoteSlice.calls)
  return calls_.Get(index);
}
inline ::proto::OptionQuote* OptionQuoteSlice::add_calls() {
  // @@protoc_insertion_point(field_add:proto.OptionQuoteSlice.calls)
  return calls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::OptionQuote >&
OptionQuoteSlice::calls() const {
  // @@protoc_insertion_point(field_list:proto.OptionQuoteSlice.calls)
  return calls_;
}

// -------------------------------------------------------------------

// OptionMarket

// double timestamp = 1;
inline void OptionMarket::clear_timestamp() {
  timestamp_ = 0;
}
inline double OptionMarket::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.OptionMarket.timestamp)
  return timestamp_;
}
inline void OptionMarket::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.OptionMarket.timestamp)
}

// .proto.Spot spot = 2;
inline bool OptionMarket::has_spot() const {
  return this != internal_default_instance() && spot_ != NULL;
}
inline void OptionMarket::clear_spot() {
  if (GetArenaNoVirtual() == NULL && spot_ != NULL) {
    delete spot_;
  }
  spot_ = NULL;
}
inline const ::proto::Spot& OptionMarket::_internal_spot() const {
  return *spot_;
}
inline const ::proto::Spot& OptionMarket::spot() const {
  const ::proto::Spot* p = spot_;
  // @@protoc_insertion_point(field_get:proto.OptionMarket.spot)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Spot*>(
      &::proto::_Spot_default_instance_);
}
inline ::proto::Spot* OptionMarket::release_spot() {
  // @@protoc_insertion_point(field_release:proto.OptionMarket.spot)
  
  ::proto::Spot* temp = spot_;
  spot_ = NULL;
  return temp;
}
inline ::proto::Spot* OptionMarket::mutable_spot() {
  
  if (spot_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Spot>(GetArenaNoVirtual());
    spot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.OptionMarket.spot)
  return spot_;
}
inline void OptionMarket::set_allocated_spot(::proto::Spot* spot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete spot_;
  }
  if (spot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spot, submessage_arena);
    }
    
  } else {
    
  }
  spot_ = spot;
  // @@protoc_insertion_point(field_set_allocated:proto.OptionMarket.spot)
}

// .proto.FlatVol vol = 3;
inline bool OptionMarket::has_vol() const {
  return this != internal_default_instance() && vol_ != NULL;
}
inline void OptionMarket::clear_vol() {
  if (GetArenaNoVirtual() == NULL && vol_ != NULL) {
    delete vol_;
  }
  vol_ = NULL;
}
inline const ::proto::FlatVol& OptionMarket::_internal_vol() const {
  return *vol_;
}
inline const ::proto::FlatVol& OptionMarket::vol() const {
  const ::proto::FlatVol* p = vol_;
  // @@protoc_insertion_point(field_get:proto.OptionMarket.vol)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::FlatVol*>(
      &::proto::_FlatVol_default_instance_);
}
inline ::proto::FlatVol* OptionMarket::release_vol() {
  // @@protoc_insertion_point(field_release:proto.OptionMarket.vol)
  
  ::proto::FlatVol* temp = vol_;
  vol_ = NULL;
  return temp;
}
inline ::proto::FlatVol* OptionMarket::mutable_vol() {
  
  if (vol_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::FlatVol>(GetArenaNoVirtual());
    vol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.OptionMarket.vol)
  return vol_;
}
inline void OptionMarket::set_allocated_vol(::proto::FlatVol* vol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vol_;
  }
  if (vol) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vol, submessage_arena);
    }
    
  } else {
    
  }
  vol_ = vol;
  // @@protoc_insertion_point(field_set_allocated:proto.OptionMarket.vol)
}

// .proto.RiskFreeRate rate = 4;
inline bool OptionMarket::has_rate() const {
  return this != internal_default_instance() && rate_ != NULL;
}
inline void OptionMarket::clear_rate() {
  if (GetArenaNoVirtual() == NULL && rate_ != NULL) {
    delete rate_;
  }
  rate_ = NULL;
}
inline const ::proto::RiskFreeRate& OptionMarket::_internal_rate() const {
  return *rate_;
}
inline const ::proto::RiskFreeRate& OptionMarket::rate() const {
  const ::proto::RiskFreeRate* p = rate_;
  // @@protoc_insertion_point(field_get:proto.OptionMarket.rate)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::RiskFreeRate*>(
      &::proto::_RiskFreeRate_default_instance_);
}
inline ::proto::RiskFreeRate* OptionMarket::release_rate() {
  // @@protoc_insertion_point(field_release:proto.OptionMarket.rate)
  
  ::proto::RiskFreeRate* temp = rate_;
  rate_ = NULL;
  return temp;
}
inline ::proto::RiskFreeRate* OptionMarket::mutable_rate() {
  
  if (rate_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::RiskFreeRate>(GetArenaNoVirtual());
    rate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.OptionMarket.rate)
  return rate_;
}
inline void OptionMarket::set_allocated_rate(::proto::RiskFreeRate* rate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rate_;
  }
  if (rate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rate, submessage_arena);
    }
    
  } else {
    
  }
  rate_ = rate;
  // @@protoc_insertion_point(field_set_allocated:proto.OptionMarket.rate)
}

// -------------------------------------------------------------------

// ImpliedVolQuote

// double timestamp = 1;
inline void ImpliedVolQuote::clear_timestamp() {
  timestamp_ = 0;
}
inline double ImpliedVolQuote::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.ImpliedVolQuote.timestamp)
  return timestamp_;
}
inline void ImpliedVolQuote::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.ImpliedVolQuote.timestamp)
}

// .proto.OptionQuote input = 2;
inline bool ImpliedVolQuote::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
inline void ImpliedVolQuote::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) {
    delete input_;
  }
  input_ = NULL;
}
inline const ::proto::OptionQuote& ImpliedVolQuote::_internal_input() const {
  return *input_;
}
inline const ::proto::OptionQuote& ImpliedVolQuote::input() const {
  const ::proto::OptionQuote* p = input_;
  // @@protoc_insertion_point(field_get:proto.ImpliedVolQuote.input)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::OptionQuote*>(
      &::proto::_OptionQuote_default_instance_);
}
inline ::proto::OptionQuote* ImpliedVolQuote::release_input() {
  // @@protoc_insertion_point(field_release:proto.ImpliedVolQuote.input)
  
  ::proto::OptionQuote* temp = input_;
  input_ = NULL;
  return temp;
}
inline ::proto::OptionQuote* ImpliedVolQuote::mutable_input() {
  
  if (input_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::OptionQuote>(GetArenaNoVirtual());
    input_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.ImpliedVolQuote.input)
  return input_;
}
inline void ImpliedVolQuote::set_allocated_input(::proto::OptionQuote* input) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_;
  }
  if (input) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:proto.ImpliedVolQuote.input)
}

// string error = 3;
inline void ImpliedVolQuote::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImpliedVolQuote::error() const {
  // @@protoc_insertion_point(field_get:proto.ImpliedVolQuote.error)
  return error_.GetNoArena();
}
inline void ImpliedVolQuote::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ImpliedVolQuote.error)
}
#if LANG_CXX11
inline void ImpliedVolQuote::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ImpliedVolQuote.error)
}
#endif
inline void ImpliedVolQuote::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ImpliedVolQuote.error)
}
inline void ImpliedVolQuote::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ImpliedVolQuote.error)
}
inline ::std::string* ImpliedVolQuote::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:proto.ImpliedVolQuote.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImpliedVolQuote::release_error() {
  // @@protoc_insertion_point(field_release:proto.ImpliedVolQuote.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImpliedVolQuote::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:proto.ImpliedVolQuote.error)
}

// double vol = 4;
inline void ImpliedVolQuote::clear_vol() {
  vol_ = 0;
}
inline double ImpliedVolQuote::vol() const {
  // @@protoc_insertion_point(field_get:proto.ImpliedVolQuote.vol)
  return vol_;
}
inline void ImpliedVolQuote::set_vol(double value) {
  
  vol_ = value;
  // @@protoc_insertion_point(field_set:proto.ImpliedVolQuote.vol)
}

// int64 nbiteration = 5;
inline void ImpliedVolQuote::clear_nbiteration() {
  nbiteration_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ImpliedVolQuote::nbiteration() const {
  // @@protoc_insertion_point(field_get:proto.ImpliedVolQuote.nbiteration)
  return nbiteration_;
}
inline void ImpliedVolQuote::set_nbiteration(::google::protobuf::int64 value) {
  
  nbiteration_ = value;
  // @@protoc_insertion_point(field_set:proto.ImpliedVolQuote.nbiteration)
}

// -------------------------------------------------------------------

// ImpliedVolSlice

// double timestamp = 1;
inline void ImpliedVolSlice::clear_timestamp() {
  timestamp_ = 0;
}
inline double ImpliedVolSlice::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.ImpliedVolSlice.timestamp)
  return timestamp_;
}
inline void ImpliedVolSlice::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.ImpliedVolSlice.timestamp)
}

// bool iserror = 2;
inline void ImpliedVolSlice::clear_iserror() {
  iserror_ = false;
}
inline bool ImpliedVolSlice::iserror() const {
  // @@protoc_insertion_point(field_get:proto.ImpliedVolSlice.iserror)
  return iserror_;
}
inline void ImpliedVolSlice::set_iserror(bool value) {
  
  iserror_ = value;
  // @@protoc_insertion_point(field_set:proto.ImpliedVolSlice.iserror)
}

// double expiry = 3;
inline void ImpliedVolSlice::clear_expiry() {
  expiry_ = 0;
}
inline double ImpliedVolSlice::expiry() const {
  // @@protoc_insertion_point(field_get:proto.ImpliedVolSlice.expiry)
  return expiry_;
}
inline void ImpliedVolSlice::set_expiry(double value) {
  
  expiry_ = value;
  // @@protoc_insertion_point(field_set:proto.ImpliedVolSlice.expiry)
}

// repeated .proto.ImpliedVolQuote quotes = 4;
inline int ImpliedVolSlice::quotes_size() const {
  return quotes_.size();
}
inline void ImpliedVolSlice::clear_quotes() {
  quotes_.Clear();
}
inline ::proto::ImpliedVolQuote* ImpliedVolSlice::mutable_quotes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ImpliedVolSlice.quotes)
  return quotes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ImpliedVolQuote >*
ImpliedVolSlice::mutable_quotes() {
  // @@protoc_insertion_point(field_mutable_list:proto.ImpliedVolSlice.quotes)
  return &quotes_;
}
inline const ::proto::ImpliedVolQuote& ImpliedVolSlice::quotes(int index) const {
  // @@protoc_insertion_point(field_get:proto.ImpliedVolSlice.quotes)
  return quotes_.Get(index);
}
inline ::proto::ImpliedVolQuote* ImpliedVolSlice::add_quotes() {
  // @@protoc_insertion_point(field_add:proto.ImpliedVolSlice.quotes)
  return quotes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ImpliedVolQuote >&
ImpliedVolSlice::quotes() const {
  // @@protoc_insertion_point(field_list:proto.ImpliedVolSlice.quotes)
  return quotes_;
}

// -------------------------------------------------------------------

// ImpliedVolSurface

// double timestamp = 1;
inline void ImpliedVolSurface::clear_timestamp() {
  timestamp_ = 0;
}
inline double ImpliedVolSurface::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.ImpliedVolSurface.timestamp)
  return timestamp_;
}
inline void ImpliedVolSurface::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.ImpliedVolSurface.timestamp)
}

// repeated .proto.ImpliedVolSlice slices = 2;
inline int ImpliedVolSurface::slices_size() const {
  return slices_.size();
}
inline void ImpliedVolSurface::clear_slices() {
  slices_.Clear();
}
inline ::proto::ImpliedVolSlice* ImpliedVolSurface::mutable_slices(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ImpliedVolSurface.slices)
  return slices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ImpliedVolSlice >*
ImpliedVolSurface::mutable_slices() {
  // @@protoc_insertion_point(field_mutable_list:proto.ImpliedVolSurface.slices)
  return &slices_;
}
inline const ::proto::ImpliedVolSlice& ImpliedVolSurface::slices(int index) const {
  // @@protoc_insertion_point(field_get:proto.ImpliedVolSurface.slices)
  return slices_.Get(index);
}
inline ::proto::ImpliedVolSlice* ImpliedVolSurface::add_slices() {
  // @@protoc_insertion_point(field_add:proto.ImpliedVolSurface.slices)
  return slices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ImpliedVolSlice >&
ImpliedVolSurface::slices() const {
  // @@protoc_insertion_point(field_list:proto.ImpliedVolSurface.slices)
  return slices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_marketdata_2eproto
