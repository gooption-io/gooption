// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract.proto

#ifndef PROTOBUF_INCLUDED_contract_2eproto
#define PROTOBUF_INCLUDED_contract_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_contract_2eproto 

namespace protobuf_contract_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_contract_2eproto
namespace pb {
class European;
class EuropeanDefaultTypeInternal;
extern EuropeanDefaultTypeInternal _European_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::European* Arena::CreateMaybeMessage<::pb::European>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class European : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.European) */ {
 public:
  European();
  virtual ~European();

  European(const European& from);

  inline European& operator=(const European& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  European(European&& from) noexcept
    : European() {
    *this = ::std::move(from);
  }

  inline European& operator=(European&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const European& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const European* internal_default_instance() {
    return reinterpret_cast<const European*>(
               &_European_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(European* other);
  friend void swap(European& a, European& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline European* New() const final {
    return CreateMaybeMessage<European>(NULL);
  }

  European* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<European>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const European& from);
  void MergeFrom(const European& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(European* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ticker = 2;
  void clear_ticker();
  static const int kTickerFieldNumber = 2;
  const ::std::string& ticker() const;
  void set_ticker(const ::std::string& value);
  #if LANG_CXX11
  void set_ticker(::std::string&& value);
  #endif
  void set_ticker(const char* value);
  void set_ticker(const char* value, size_t size);
  ::std::string* mutable_ticker();
  ::std::string* release_ticker();
  void set_allocated_ticker(::std::string* ticker);

  // string undticker = 3;
  void clear_undticker();
  static const int kUndtickerFieldNumber = 3;
  const ::std::string& undticker() const;
  void set_undticker(const ::std::string& value);
  #if LANG_CXX11
  void set_undticker(::std::string&& value);
  #endif
  void set_undticker(const char* value);
  void set_undticker(const char* value, size_t size);
  ::std::string* mutable_undticker();
  ::std::string* release_undticker();
  void set_allocated_undticker(::std::string* undticker);

  // string putcall = 6;
  void clear_putcall();
  static const int kPutcallFieldNumber = 6;
  const ::std::string& putcall() const;
  void set_putcall(const ::std::string& value);
  #if LANG_CXX11
  void set_putcall(::std::string&& value);
  #endif
  void set_putcall(const char* value);
  void set_putcall(const char* value, size_t size);
  ::std::string* mutable_putcall();
  ::std::string* release_putcall();
  void set_allocated_putcall(::std::string* putcall);

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // double strike = 4;
  void clear_strike();
  static const int kStrikeFieldNumber = 4;
  double strike() const;
  void set_strike(double value);

  // double expiry = 5;
  void clear_expiry();
  static const int kExpiryFieldNumber = 5;
  double expiry() const;
  void set_expiry(double value);

  // @@protoc_insertion_point(class_scope:pb.European)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ticker_;
  ::google::protobuf::internal::ArenaStringPtr undticker_;
  ::google::protobuf::internal::ArenaStringPtr putcall_;
  double timestamp_;
  double strike_;
  double expiry_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_contract_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// European

// double timestamp = 1;
inline void European::clear_timestamp() {
  timestamp_ = 0;
}
inline double European::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.European.timestamp)
  return timestamp_;
}
inline void European::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:pb.European.timestamp)
}

// string ticker = 2;
inline void European::clear_ticker() {
  ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& European::ticker() const {
  // @@protoc_insertion_point(field_get:pb.European.ticker)
  return ticker_.GetNoArena();
}
inline void European::set_ticker(const ::std::string& value) {
  
  ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.European.ticker)
}
#if LANG_CXX11
inline void European::set_ticker(::std::string&& value) {
  
  ticker_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.European.ticker)
}
#endif
inline void European::set_ticker(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.European.ticker)
}
inline void European::set_ticker(const char* value, size_t size) {
  
  ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.European.ticker)
}
inline ::std::string* European::mutable_ticker() {
  
  // @@protoc_insertion_point(field_mutable:pb.European.ticker)
  return ticker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* European::release_ticker() {
  // @@protoc_insertion_point(field_release:pb.European.ticker)
  
  return ticker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void European::set_allocated_ticker(::std::string* ticker) {
  if (ticker != NULL) {
    
  } else {
    
  }
  ticker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticker);
  // @@protoc_insertion_point(field_set_allocated:pb.European.ticker)
}

// string undticker = 3;
inline void European::clear_undticker() {
  undticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& European::undticker() const {
  // @@protoc_insertion_point(field_get:pb.European.undticker)
  return undticker_.GetNoArena();
}
inline void European::set_undticker(const ::std::string& value) {
  
  undticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.European.undticker)
}
#if LANG_CXX11
inline void European::set_undticker(::std::string&& value) {
  
  undticker_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.European.undticker)
}
#endif
inline void European::set_undticker(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  undticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.European.undticker)
}
inline void European::set_undticker(const char* value, size_t size) {
  
  undticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.European.undticker)
}
inline ::std::string* European::mutable_undticker() {
  
  // @@protoc_insertion_point(field_mutable:pb.European.undticker)
  return undticker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* European::release_undticker() {
  // @@protoc_insertion_point(field_release:pb.European.undticker)
  
  return undticker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void European::set_allocated_undticker(::std::string* undticker) {
  if (undticker != NULL) {
    
  } else {
    
  }
  undticker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), undticker);
  // @@protoc_insertion_point(field_set_allocated:pb.European.undticker)
}

// double strike = 4;
inline void European::clear_strike() {
  strike_ = 0;
}
inline double European::strike() const {
  // @@protoc_insertion_point(field_get:pb.European.strike)
  return strike_;
}
inline void European::set_strike(double value) {
  
  strike_ = value;
  // @@protoc_insertion_point(field_set:pb.European.strike)
}

// double expiry = 5;
inline void European::clear_expiry() {
  expiry_ = 0;
}
inline double European::expiry() const {
  // @@protoc_insertion_point(field_get:pb.European.expiry)
  return expiry_;
}
inline void European::set_expiry(double value) {
  
  expiry_ = value;
  // @@protoc_insertion_point(field_set:pb.European.expiry)
}

// string putcall = 6;
inline void European::clear_putcall() {
  putcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& European::putcall() const {
  // @@protoc_insertion_point(field_get:pb.European.putcall)
  return putcall_.GetNoArena();
}
inline void European::set_putcall(const ::std::string& value) {
  
  putcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.European.putcall)
}
#if LANG_CXX11
inline void European::set_putcall(::std::string&& value) {
  
  putcall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.European.putcall)
}
#endif
inline void European::set_putcall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  putcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.European.putcall)
}
inline void European::set_putcall(const char* value, size_t size) {
  
  putcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.European.putcall)
}
inline ::std::string* European::mutable_putcall() {
  
  // @@protoc_insertion_point(field_mutable:pb.European.putcall)
  return putcall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* European::release_putcall() {
  // @@protoc_insertion_point(field_release:pb.European.putcall)
  
  return putcall_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void European::set_allocated_putcall(::std::string* putcall) {
  if (putcall != NULL) {
    
  } else {
    
  }
  putcall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), putcall);
  // @@protoc_insertion_point(field_set_allocated:pb.European.putcall)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_contract_2eproto
