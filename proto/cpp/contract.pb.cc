// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract.proto

#include "contract.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace pb {
class EuropeanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<European>
      _instance;
} _European_default_instance_;
}  // namespace pb
namespace protobuf_contract_2eproto {
static void InitDefaultsEuropean() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_European_default_instance_;
    new (ptr) ::pb::European();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::European::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_European =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEuropean}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_European.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::European, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::European, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::European, ticker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::European, undticker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::European, strike_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::European, expiry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::European, putcall_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::European)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_European_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "contract.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016contract.proto\022\002pb\"q\n\010European\022\021\n\ttime"
      "stamp\030\001 \001(\001\022\016\n\006ticker\030\002 \001(\t\022\021\n\tundticker"
      "\030\003 \001(\t\022\016\n\006strike\030\004 \001(\001\022\016\n\006expiry\030\005 \001(\001\022\017"
      "\n\007putcall\030\006 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 143);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "contract.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_contract_2eproto
namespace pb {

// ===================================================================

void European::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int European::kTimestampFieldNumber;
const int European::kTickerFieldNumber;
const int European::kUndtickerFieldNumber;
const int European::kStrikeFieldNumber;
const int European::kExpiryFieldNumber;
const int European::kPutcallFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

European::European()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_contract_2eproto::scc_info_European.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.European)
}
European::European(const European& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticker().size() > 0) {
    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  undticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.undticker().size() > 0) {
    undticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.undticker_);
  }
  putcall_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.putcall().size() > 0) {
    putcall_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.putcall_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiry_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(expiry_));
  // @@protoc_insertion_point(copy_constructor:pb.European)
}

void European::SharedCtor() {
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  undticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  putcall_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiry_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(expiry_));
}

European::~European() {
  // @@protoc_insertion_point(destructor:pb.European)
  SharedDtor();
}

void European::SharedDtor() {
  ticker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  undticker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  putcall_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void European::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* European::descriptor() {
  ::protobuf_contract_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_contract_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const European& European::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_contract_2eproto::scc_info_European.base);
  return *internal_default_instance();
}


void European::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.European)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  undticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  putcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiry_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(expiry_));
  _internal_metadata_.Clear();
}

bool European::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.European)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ticker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticker()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticker().data(), static_cast<int>(this->ticker().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.European.ticker"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string undticker = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_undticker()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->undticker().data(), static_cast<int>(this->undticker().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.European.undticker"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double strike = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strike_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double expiry = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &expiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string putcall = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_putcall()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->putcall().data(), static_cast<int>(this->putcall().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.European.putcall"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.European)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.European)
  return false;
#undef DO_
}

void European::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.European)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // string ticker = 2;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.European.ticker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ticker(), output);
  }

  // string undticker = 3;
  if (this->undticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->undticker().data(), static_cast<int>(this->undticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.European.undticker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->undticker(), output);
  }

  // double strike = 4;
  if (this->strike() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->strike(), output);
  }

  // double expiry = 5;
  if (this->expiry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->expiry(), output);
  }

  // string putcall = 6;
  if (this->putcall().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->putcall().data(), static_cast<int>(this->putcall().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.European.putcall");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->putcall(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.European)
}

::google::protobuf::uint8* European::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.European)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // string ticker = 2;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.European.ticker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ticker(), target);
  }

  // string undticker = 3;
  if (this->undticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->undticker().data(), static_cast<int>(this->undticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.European.undticker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->undticker(), target);
  }

  // double strike = 4;
  if (this->strike() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->strike(), target);
  }

  // double expiry = 5;
  if (this->expiry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->expiry(), target);
  }

  // string putcall = 6;
  if (this->putcall().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->putcall().data(), static_cast<int>(this->putcall().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.European.putcall");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->putcall(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.European)
  return target;
}

size_t European::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.European)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ticker = 2;
  if (this->ticker().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticker());
  }

  // string undticker = 3;
  if (this->undticker().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->undticker());
  }

  // string putcall = 6;
  if (this->putcall().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->putcall());
  }

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // double strike = 4;
  if (this->strike() != 0) {
    total_size += 1 + 8;
  }

  // double expiry = 5;
  if (this->expiry() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void European::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.European)
  GOOGLE_DCHECK_NE(&from, this);
  const European* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const European>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.European)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.European)
    MergeFrom(*source);
  }
}

void European::MergeFrom(const European& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.European)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticker().size() > 0) {

    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  if (from.undticker().size() > 0) {

    undticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.undticker_);
  }
  if (from.putcall().size() > 0) {

    putcall_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.putcall_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.strike() != 0) {
    set_strike(from.strike());
  }
  if (from.expiry() != 0) {
    set_expiry(from.expiry());
  }
}

void European::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.European)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void European::CopyFrom(const European& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.European)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool European::IsInitialized() const {
  return true;
}

void European::Swap(European* other) {
  if (other == this) return;
  InternalSwap(other);
}
void European::InternalSwap(European* other) {
  using std::swap;
  ticker_.Swap(&other->ticker_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  undticker_.Swap(&other->undticker_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  putcall_.Swap(&other->putcall_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(strike_, other->strike_);
  swap(expiry_, other->expiry_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata European::GetMetadata() const {
  protobuf_contract_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_contract_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::European* Arena::CreateMaybeMessage< ::pb::European >(Arena* arena) {
  return Arena::CreateInternal< ::pb::European >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
