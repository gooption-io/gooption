// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PriceRequest struct {
	Pricingdate float64       `protobuf:"fixed64,1,opt,name=pricingdate,proto3" json:"pricingdate,omitempty"`
	Contract    *European     `protobuf:"bytes,2,opt,name=contract" json:"contract,omitempty"`
	Marketdata  *OptionMarket `protobuf:"bytes,3,opt,name=marketdata" json:"marketdata,omitempty"`
}

func (m *PriceRequest) Reset()                    { *m = PriceRequest{} }
func (m *PriceRequest) String() string            { return proto.CompactTextString(m) }
func (*PriceRequest) ProtoMessage()               {}
func (*PriceRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

func (m *PriceRequest) GetPricingdate() float64 {
	if m != nil {
		return m.Pricingdate
	}
	return 0
}

func (m *PriceRequest) GetContract() *European {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *PriceRequest) GetMarketdata() *OptionMarket {
	if m != nil {
		return m.Marketdata
	}
	return nil
}

type PriceResponse struct {
	Price float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Error string  `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *PriceResponse) Reset()                    { *m = PriceResponse{} }
func (m *PriceResponse) String() string            { return proto.CompactTextString(m) }
func (*PriceResponse) ProtoMessage()               {}
func (*PriceResponse) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

func (m *PriceResponse) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *PriceResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GreekRequest struct {
	Request *PriceRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Greek   []string      `protobuf:"bytes,2,rep,name=greek" json:"greek,omitempty"`
}

func (m *GreekRequest) Reset()                    { *m = GreekRequest{} }
func (m *GreekRequest) String() string            { return proto.CompactTextString(m) }
func (*GreekRequest) ProtoMessage()               {}
func (*GreekRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{2} }

func (m *GreekRequest) GetRequest() *PriceRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *GreekRequest) GetGreek() []string {
	if m != nil {
		return m.Greek
	}
	return nil
}

type GreekResponse struct {
	Greeks []*GreekResponse_Greek `protobuf:"bytes,1,rep,name=greeks" json:"greeks,omitempty"`
	Error  string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *GreekResponse) Reset()                    { *m = GreekResponse{} }
func (m *GreekResponse) String() string            { return proto.CompactTextString(m) }
func (*GreekResponse) ProtoMessage()               {}
func (*GreekResponse) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{3} }

func (m *GreekResponse) GetGreeks() []*GreekResponse_Greek {
	if m != nil {
		return m.Greeks
	}
	return nil
}

func (m *GreekResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GreekResponse_Greek struct {
	Label string  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Error string  `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *GreekResponse_Greek) Reset()                    { *m = GreekResponse_Greek{} }
func (m *GreekResponse_Greek) String() string            { return proto.CompactTextString(m) }
func (*GreekResponse_Greek) ProtoMessage()               {}
func (*GreekResponse_Greek) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{3, 0} }

func (m *GreekResponse_Greek) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *GreekResponse_Greek) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *GreekResponse_Greek) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ImpliedVolRequest struct {
	Pricingdate float64             `protobuf:"fixed64,1,opt,name=pricingdate,proto3" json:"pricingdate,omitempty"`
	Marketdata  *OptionMarket       `protobuf:"bytes,2,opt,name=marketdata" json:"marketdata,omitempty"`
	Quotes      []*OptionQuoteSlice `protobuf:"bytes,3,rep,name=quotes" json:"quotes,omitempty"`
}

func (m *ImpliedVolRequest) Reset()                    { *m = ImpliedVolRequest{} }
func (m *ImpliedVolRequest) String() string            { return proto.CompactTextString(m) }
func (*ImpliedVolRequest) ProtoMessage()               {}
func (*ImpliedVolRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{4} }

func (m *ImpliedVolRequest) GetPricingdate() float64 {
	if m != nil {
		return m.Pricingdate
	}
	return 0
}

func (m *ImpliedVolRequest) GetMarketdata() *OptionMarket {
	if m != nil {
		return m.Marketdata
	}
	return nil
}

func (m *ImpliedVolRequest) GetQuotes() []*OptionQuoteSlice {
	if m != nil {
		return m.Quotes
	}
	return nil
}

type ImpliedVolResponse struct {
	Volsurface *ImpliedVolSurface `protobuf:"bytes,1,opt,name=volsurface" json:"volsurface,omitempty"`
	Error      string             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ImpliedVolResponse) Reset()                    { *m = ImpliedVolResponse{} }
func (m *ImpliedVolResponse) String() string            { return proto.CompactTextString(m) }
func (*ImpliedVolResponse) ProtoMessage()               {}
func (*ImpliedVolResponse) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{5} }

func (m *ImpliedVolResponse) GetVolsurface() *ImpliedVolSurface {
	if m != nil {
		return m.Volsurface
	}
	return nil
}

func (m *ImpliedVolResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*PriceRequest)(nil), "pb.PriceRequest")
	proto.RegisterType((*PriceResponse)(nil), "pb.PriceResponse")
	proto.RegisterType((*GreekRequest)(nil), "pb.GreekRequest")
	proto.RegisterType((*GreekResponse)(nil), "pb.GreekResponse")
	proto.RegisterType((*GreekResponse_Greek)(nil), "pb.GreekResponse.Greek")
	proto.RegisterType((*ImpliedVolRequest)(nil), "pb.ImpliedVolRequest")
	proto.RegisterType((*ImpliedVolResponse)(nil), "pb.ImpliedVolResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Gobs service

type GobsClient interface {
	Price(ctx context.Context, in *PriceRequest, opts ...grpc.CallOption) (*PriceResponse, error)
	Greek(ctx context.Context, in *GreekRequest, opts ...grpc.CallOption) (*GreekResponse, error)
	ImpliedVol(ctx context.Context, in *ImpliedVolRequest, opts ...grpc.CallOption) (*ImpliedVolResponse, error)
}

type gobsClient struct {
	cc *grpc.ClientConn
}

func NewGobsClient(cc *grpc.ClientConn) GobsClient {
	return &gobsClient{cc}
}

func (c *gobsClient) Price(ctx context.Context, in *PriceRequest, opts ...grpc.CallOption) (*PriceResponse, error) {
	out := new(PriceResponse)
	err := grpc.Invoke(ctx, "/pb.Gobs/Price", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gobsClient) Greek(ctx context.Context, in *GreekRequest, opts ...grpc.CallOption) (*GreekResponse, error) {
	out := new(GreekResponse)
	err := grpc.Invoke(ctx, "/pb.Gobs/Greek", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gobsClient) ImpliedVol(ctx context.Context, in *ImpliedVolRequest, opts ...grpc.CallOption) (*ImpliedVolResponse, error) {
	out := new(ImpliedVolResponse)
	err := grpc.Invoke(ctx, "/pb.Gobs/ImpliedVol", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gobs service

type GobsServer interface {
	Price(context.Context, *PriceRequest) (*PriceResponse, error)
	Greek(context.Context, *GreekRequest) (*GreekResponse, error)
	ImpliedVol(context.Context, *ImpliedVolRequest) (*ImpliedVolResponse, error)
}

func RegisterGobsServer(s *grpc.Server, srv GobsServer) {
	s.RegisterService(&_Gobs_serviceDesc, srv)
}

func _Gobs_Price_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GobsServer).Price(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gobs/Price",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GobsServer).Price(ctx, req.(*PriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gobs_Greek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GobsServer).Greek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gobs/Greek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GobsServer).Greek(ctx, req.(*GreekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gobs_ImpliedVol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImpliedVolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GobsServer).ImpliedVol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gobs/ImpliedVol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GobsServer).ImpliedVol(ctx, req.(*ImpliedVolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gobs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Gobs",
	HandlerType: (*GobsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Price",
			Handler:    _Gobs_Price_Handler,
		},
		{
			MethodName: "Greek",
			Handler:    _Gobs_Greek_Handler,
		},
		{
			MethodName: "ImpliedVol",
			Handler:    _Gobs_ImpliedVol_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func (m *PriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pricingdate != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Service(dAtA, i, uint64(math.Float64bits(float64(m.Pricingdate))))
	}
	if m.Contract != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Contract.Size()))
		n1, err := m.Contract.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Marketdata != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Marketdata.Size()))
		n2, err := m.Marketdata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *PriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Service(dAtA, i, uint64(math.Float64bits(float64(m.Price))))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *GreekRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreekRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Request.Size()))
		n3, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Greek) > 0 {
		for _, s := range m.Greek {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GreekResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreekResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Greeks) > 0 {
		for _, msg := range m.Greeks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *GreekResponse_Greek) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreekResponse_Greek) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if m.Value != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Service(dAtA, i, uint64(math.Float64bits(float64(m.Value))))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *ImpliedVolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImpliedVolRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pricingdate != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Service(dAtA, i, uint64(math.Float64bits(float64(m.Pricingdate))))
	}
	if m.Marketdata != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Marketdata.Size()))
		n4, err := m.Marketdata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Quotes) > 0 {
		for _, msg := range m.Quotes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ImpliedVolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImpliedVolResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Volsurface != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Volsurface.Size()))
		n5, err := m.Volsurface.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func encodeFixed64Service(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Service(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PriceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Pricingdate != 0 {
		n += 9
	}
	if m.Contract != nil {
		l = m.Contract.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Marketdata != nil {
		l = m.Marketdata.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *PriceResponse) Size() (n int) {
	var l int
	_ = l
	if m.Price != 0 {
		n += 9
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GreekRequest) Size() (n int) {
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Greek) > 0 {
		for _, s := range m.Greek {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *GreekResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Greeks) > 0 {
		for _, e := range m.Greeks {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GreekResponse_Greek) Size() (n int) {
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ImpliedVolRequest) Size() (n int) {
	var l int
	_ = l
	if m.Pricingdate != 0 {
		n += 9
	}
	if m.Marketdata != nil {
		l = m.Marketdata.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Quotes) > 0 {
		for _, e := range m.Quotes {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *ImpliedVolResponse) Size() (n int) {
	var l int
	_ = l
	if m.Volsurface != nil {
		l = m.Volsurface.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pricingdate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Pricingdate = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contract == nil {
				m.Contract = &European{}
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marketdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Marketdata == nil {
				m.Marketdata = &OptionMarket{}
			}
			if err := m.Marketdata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Price = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GreekRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GreekRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GreekRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &PriceRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Greek", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Greek = append(m.Greek, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GreekResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GreekResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GreekResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Greeks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Greeks = append(m.Greeks, &GreekResponse_Greek{})
			if err := m.Greeks[len(m.Greeks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GreekResponse_Greek) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Greek: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Greek: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Value = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImpliedVolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImpliedVolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImpliedVolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pricingdate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Pricingdate = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marketdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Marketdata == nil {
				m.Marketdata = &OptionMarket{}
			}
			if err := m.Marketdata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quotes = append(m.Quotes, &OptionQuoteSlice{})
			if err := m.Quotes[len(m.Quotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImpliedVolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImpliedVolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImpliedVolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volsurface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Volsurface == nil {
				m.Volsurface = &ImpliedVolSurface{}
			}
			if err := m.Volsurface.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("service.proto", fileDescriptorService) }

var fileDescriptorService = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x18, 0xd4, 0x3a, 0x24, 0xd0, 0x2f, 0x49, 0x95, 0x6e, 0x0b, 0x98, 0x08, 0x45, 0x96, 0x4f, 0x51,
	0x84, 0x62, 0x08, 0xe2, 0x52, 0x6e, 0x48, 0x28, 0xea, 0x01, 0x51, 0x5c, 0x89, 0x0b, 0xa7, 0xb5,
	0xb3, 0x58, 0x56, 0x5d, 0xaf, 0xbb, 0xbb, 0xf6, 0x03, 0x70, 0xe6, 0x86, 0x78, 0x00, 0xde, 0x86,
	0x23, 0x12, 0x2f, 0x80, 0x22, 0x5e, 0x81, 0x3b, 0xda, 0x9f, 0xc4, 0x9b, 0x12, 0x04, 0xb7, 0x7c,
	0xf3, 0x4d, 0xe6, 0x9b, 0xd9, 0x49, 0x60, 0x28, 0x28, 0x6f, 0xf2, 0x94, 0xce, 0x2b, 0xce, 0x24,
	0xc3, 0x5e, 0x95, 0x8c, 0x0f, 0x53, 0x56, 0x4a, 0x4e, 0x52, 0x69, 0xb0, 0xf1, 0xe8, 0x8a, 0xf0,
	0x4b, 0x2a, 0x57, 0x44, 0x12, 0x8b, 0x3c, 0xcc, 0x18, 0xcb, 0x0a, 0x1a, 0x91, 0x2a, 0x8f, 0x48,
	0x59, 0x32, 0x49, 0x64, 0xce, 0x4a, 0x61, 0xb6, 0xe1, 0x47, 0x04, 0x83, 0x73, 0x9e, 0xa7, 0x34,
	0xa6, 0xd7, 0x35, 0x15, 0x12, 0x07, 0xd0, 0xaf, 0x78, 0x9e, 0xe6, 0x65, 0xb6, 0x22, 0x92, 0xfa,
	0x28, 0x40, 0x53, 0x14, 0xbb, 0x10, 0x9e, 0xc2, 0x9d, 0xcd, 0x51, 0xdf, 0x0b, 0xd0, 0xb4, 0xbf,
	0x18, 0xcc, 0xab, 0x64, 0xfe, 0xb2, 0xe6, 0xac, 0xa2, 0xa4, 0x8c, 0xb7, 0x5b, 0xfc, 0x18, 0xa0,
	0xb5, 0xe3, 0x77, 0x34, 0x77, 0xa4, 0xb8, 0xaf, 0x2b, 0xe5, 0xe1, 0x95, 0xde, 0xc5, 0x0e, 0x27,
	0x7c, 0x0e, 0x43, 0xeb, 0x46, 0x54, 0xac, 0x14, 0x14, 0x9f, 0x40, 0x57, 0xdd, 0xa6, 0xfa, 0x12,
	0x8a, 0xcd, 0xa0, 0x50, 0xca, 0x39, 0xe3, 0x5a, 0xf3, 0x20, 0x36, 0x43, 0x78, 0x0e, 0x83, 0x25,
	0xa7, 0xf4, 0x72, 0x13, 0x65, 0x06, 0xb7, 0xb9, 0xf9, 0xa8, 0x63, 0xd8, 0xdb, 0x6e, 0xda, 0x78,
	0x43, 0x50, 0x8a, 0x99, 0xfa, 0xae, 0xef, 0x05, 0x1d, 0xa5, 0xa8, 0x87, 0xf0, 0x0b, 0x82, 0xa1,
	0x95, 0xb4, 0x7e, 0x22, 0xe8, 0xe9, 0x95, 0xf0, 0x51, 0xd0, 0x99, 0xf6, 0x17, 0xf7, 0x95, 0xe4,
	0x0e, 0xc5, 0x4e, 0x96, 0xd6, 0x5a, 0xf5, 0x1c, 0xab, 0xe3, 0x33, 0xe8, 0x6a, 0x9a, 0x5a, 0x17,
	0x24, 0xa1, 0x85, 0x76, 0x78, 0x10, 0x9b, 0x41, 0xa1, 0x0d, 0x29, 0xea, 0x6d, 0x6a, 0x3d, 0xfc,
	0x25, 0xf5, 0x67, 0x04, 0x47, 0x67, 0x57, 0x55, 0x91, 0xd3, 0xd5, 0x5b, 0x56, 0xfc, 0x7f, 0x8d,
	0xbb, 0xe5, 0x78, 0xff, 0x2e, 0x07, 0x3f, 0x82, 0xde, 0x75, 0xcd, 0x24, 0x15, 0x7e, 0x47, 0x67,
	0x3f, 0x69, 0xd9, 0x6f, 0x14, 0x7e, 0x51, 0xa8, 0x97, 0xb5, 0x9c, 0x90, 0x00, 0x76, 0x6d, 0xd9,
	0xf7, 0x7b, 0x06, 0xd0, 0xb0, 0x42, 0xd4, 0xfc, 0x3d, 0x49, 0xa9, 0xad, 0xe5, 0xae, 0xd2, 0x69,
	0xb9, 0x17, 0x66, 0x19, 0x3b, 0xc4, 0xfd, 0xaf, 0xb8, 0xf8, 0x85, 0xe0, 0xd6, 0x92, 0x25, 0x02,
	0x2f, 0xa1, 0xab, 0x6b, 0xc5, 0x7f, 0x34, 0x3c, 0x3e, 0x72, 0x10, 0xe3, 0x21, 0x7c, 0xf0, 0xe1,
	0xfb, 0xcf, 0x4f, 0xde, 0x71, 0x78, 0x18, 0x35, 0x4f, 0xa2, 0x8c, 0x25, 0x22, 0xd2, 0xbf, 0xaa,
	0x53, 0x34, 0x53, 0x42, 0xa6, 0x97, 0x91, 0xd3, 0xab, 0x23, 0xb4, 0xd3, 0xf4, 0x1e, 0x21, 0x5d,
	0xba, 0x12, 0x7a, 0x07, 0xd0, 0x26, 0xc2, 0x37, 0x12, 0x6e, 0x24, 0xef, 0xdd, 0x84, 0xad, 0xee,
	0x44, 0xeb, 0xfa, 0xe1, 0xf1, 0x56, 0x37, 0x37, 0xa4, 0x86, 0x15, 0xa7, 0x68, 0xf6, 0x62, 0xf0,
	0x75, 0x3d, 0x41, 0xdf, 0xd6, 0x13, 0xf4, 0x63, 0x3d, 0x41, 0x49, 0x4f, 0xff, 0x93, 0x9f, 0xfe,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x59, 0x84, 0x38, 0xf9, 0x1e, 0x04, 0x00, 0x00,
}
