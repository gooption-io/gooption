// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: marketdata.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Index struct {
	Timestamp float64 `protobuf:"fixed64,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Ticker    string  `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Value     float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Index) Reset()                    { *m = Index{} }
func (m *Index) String() string            { return proto.CompactTextString(m) }
func (*Index) ProtoMessage()               {}
func (*Index) Descriptor() ([]byte, []int) { return fileDescriptorMarketdata, []int{0} }

func (m *Index) GetTimestamp() float64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Index) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *Index) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Spot struct {
	Index *Index `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
}

func (m *Spot) Reset()                    { *m = Spot{} }
func (m *Spot) String() string            { return proto.CompactTextString(m) }
func (*Spot) ProtoMessage()               {}
func (*Spot) Descriptor() ([]byte, []int) { return fileDescriptorMarketdata, []int{1} }

func (m *Spot) GetIndex() *Index {
	if m != nil {
		return m.Index
	}
	return nil
}

type RiskFreeRate struct {
	Index *Index `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
}

func (m *RiskFreeRate) Reset()                    { *m = RiskFreeRate{} }
func (m *RiskFreeRate) String() string            { return proto.CompactTextString(m) }
func (*RiskFreeRate) ProtoMessage()               {}
func (*RiskFreeRate) Descriptor() ([]byte, []int) { return fileDescriptorMarketdata, []int{2} }

func (m *RiskFreeRate) GetIndex() *Index {
	if m != nil {
		return m.Index
	}
	return nil
}

type FlatVol struct {
	Index *Index `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
}

func (m *FlatVol) Reset()                    { *m = FlatVol{} }
func (m *FlatVol) String() string            { return proto.CompactTextString(m) }
func (*FlatVol) ProtoMessage()               {}
func (*FlatVol) Descriptor() ([]byte, []int) { return fileDescriptorMarketdata, []int{3} }

func (m *FlatVol) GetIndex() *Index {
	if m != nil {
		return m.Index
	}
	return nil
}

type OptionQuote struct {
	Timestamp    float64 `protobuf:"fixed64,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Strike       float64 `protobuf:"fixed64,8,opt,name=strike,proto3" json:"strike,omitempty"`
	Bid          float64 `protobuf:"fixed64,9,opt,name=bid,proto3" json:"bid,omitempty"`
	Ask          float64 `protobuf:"fixed64,10,opt,name=ask,proto3" json:"ask,omitempty"`
	Volume       float64 `protobuf:"fixed64,11,opt,name=volume,proto3" json:"volume,omitempty"`
	Openinterest float64 `protobuf:"fixed64,12,opt,name=openinterest,proto3" json:"openinterest,omitempty"`
	Putcall      string  `protobuf:"bytes,13,opt,name=putcall,proto3" json:"putcall,omitempty"`
}

func (m *OptionQuote) Reset()                    { *m = OptionQuote{} }
func (m *OptionQuote) String() string            { return proto.CompactTextString(m) }
func (*OptionQuote) ProtoMessage()               {}
func (*OptionQuote) Descriptor() ([]byte, []int) { return fileDescriptorMarketdata, []int{4} }

func (m *OptionQuote) GetTimestamp() float64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *OptionQuote) GetStrike() float64 {
	if m != nil {
		return m.Strike
	}
	return 0
}

func (m *OptionQuote) GetBid() float64 {
	if m != nil {
		return m.Bid
	}
	return 0
}

func (m *OptionQuote) GetAsk() float64 {
	if m != nil {
		return m.Ask
	}
	return 0
}

func (m *OptionQuote) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *OptionQuote) GetOpeninterest() float64 {
	if m != nil {
		return m.Openinterest
	}
	return 0
}

func (m *OptionQuote) GetPutcall() string {
	if m != nil {
		return m.Putcall
	}
	return ""
}

type OptionQuoteSlice struct {
	Timestamp float64        `protobuf:"fixed64,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Expiry    float64        `protobuf:"fixed64,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Puts      []*OptionQuote `protobuf:"bytes,3,rep,name=puts" json:"puts,omitempty"`
	Calls     []*OptionQuote `protobuf:"bytes,4,rep,name=calls" json:"calls,omitempty"`
}

func (m *OptionQuoteSlice) Reset()                    { *m = OptionQuoteSlice{} }
func (m *OptionQuoteSlice) String() string            { return proto.CompactTextString(m) }
func (*OptionQuoteSlice) ProtoMessage()               {}
func (*OptionQuoteSlice) Descriptor() ([]byte, []int) { return fileDescriptorMarketdata, []int{5} }

func (m *OptionQuoteSlice) GetTimestamp() float64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *OptionQuoteSlice) GetExpiry() float64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *OptionQuoteSlice) GetPuts() []*OptionQuote {
	if m != nil {
		return m.Puts
	}
	return nil
}

func (m *OptionQuoteSlice) GetCalls() []*OptionQuote {
	if m != nil {
		return m.Calls
	}
	return nil
}

type OptionMarket struct {
	Timestamp float64       `protobuf:"fixed64,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Spot      *Spot         `protobuf:"bytes,2,opt,name=spot" json:"spot,omitempty"`
	Vol       *FlatVol      `protobuf:"bytes,3,opt,name=vol" json:"vol,omitempty"`
	Rate      *RiskFreeRate `protobuf:"bytes,4,opt,name=rate" json:"rate,omitempty"`
}

func (m *OptionMarket) Reset()                    { *m = OptionMarket{} }
func (m *OptionMarket) String() string            { return proto.CompactTextString(m) }
func (*OptionMarket) ProtoMessage()               {}
func (*OptionMarket) Descriptor() ([]byte, []int) { return fileDescriptorMarketdata, []int{6} }

func (m *OptionMarket) GetTimestamp() float64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *OptionMarket) GetSpot() *Spot {
	if m != nil {
		return m.Spot
	}
	return nil
}

func (m *OptionMarket) GetVol() *FlatVol {
	if m != nil {
		return m.Vol
	}
	return nil
}

func (m *OptionMarket) GetRate() *RiskFreeRate {
	if m != nil {
		return m.Rate
	}
	return nil
}

type ImpliedVolQuote struct {
	Timestamp   float64      `protobuf:"fixed64,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Input       *OptionQuote `protobuf:"bytes,2,opt,name=input" json:"input,omitempty"`
	Error       string       `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Vol         float64      `protobuf:"fixed64,4,opt,name=vol,proto3" json:"vol,omitempty"`
	Nbiteration int64        `protobuf:"varint,5,opt,name=nbiteration,proto3" json:"nbiteration,omitempty"`
}

func (m *ImpliedVolQuote) Reset()                    { *m = ImpliedVolQuote{} }
func (m *ImpliedVolQuote) String() string            { return proto.CompactTextString(m) }
func (*ImpliedVolQuote) ProtoMessage()               {}
func (*ImpliedVolQuote) Descriptor() ([]byte, []int) { return fileDescriptorMarketdata, []int{7} }

func (m *ImpliedVolQuote) GetTimestamp() float64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ImpliedVolQuote) GetInput() *OptionQuote {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *ImpliedVolQuote) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ImpliedVolQuote) GetVol() float64 {
	if m != nil {
		return m.Vol
	}
	return 0
}

func (m *ImpliedVolQuote) GetNbiteration() int64 {
	if m != nil {
		return m.Nbiteration
	}
	return 0
}

type ImpliedVolSlice struct {
	Timestamp float64            `protobuf:"fixed64,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Iserror   bool               `protobuf:"varint,2,opt,name=iserror,proto3" json:"iserror,omitempty"`
	Expiry    float64            `protobuf:"fixed64,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Quotes    []*ImpliedVolQuote `protobuf:"bytes,4,rep,name=quotes" json:"quotes,omitempty"`
}

func (m *ImpliedVolSlice) Reset()                    { *m = ImpliedVolSlice{} }
func (m *ImpliedVolSlice) String() string            { return proto.CompactTextString(m) }
func (*ImpliedVolSlice) ProtoMessage()               {}
func (*ImpliedVolSlice) Descriptor() ([]byte, []int) { return fileDescriptorMarketdata, []int{8} }

func (m *ImpliedVolSlice) GetTimestamp() float64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ImpliedVolSlice) GetIserror() bool {
	if m != nil {
		return m.Iserror
	}
	return false
}

func (m *ImpliedVolSlice) GetExpiry() float64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *ImpliedVolSlice) GetQuotes() []*ImpliedVolQuote {
	if m != nil {
		return m.Quotes
	}
	return nil
}

type ImpliedVolSurface struct {
	Timestamp float64            `protobuf:"fixed64,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Slices    []*ImpliedVolSlice `protobuf:"bytes,2,rep,name=slices" json:"slices,omitempty"`
}

func (m *ImpliedVolSurface) Reset()                    { *m = ImpliedVolSurface{} }
func (m *ImpliedVolSurface) String() string            { return proto.CompactTextString(m) }
func (*ImpliedVolSurface) ProtoMessage()               {}
func (*ImpliedVolSurface) Descriptor() ([]byte, []int) { return fileDescriptorMarketdata, []int{9} }

func (m *ImpliedVolSurface) GetTimestamp() float64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ImpliedVolSurface) GetSlices() []*ImpliedVolSlice {
	if m != nil {
		return m.Slices
	}
	return nil
}

func init() {
	proto.RegisterType((*Index)(nil), "pb.Index")
	proto.RegisterType((*Spot)(nil), "pb.Spot")
	proto.RegisterType((*RiskFreeRate)(nil), "pb.RiskFreeRate")
	proto.RegisterType((*FlatVol)(nil), "pb.FlatVol")
	proto.RegisterType((*OptionQuote)(nil), "pb.OptionQuote")
	proto.RegisterType((*OptionQuoteSlice)(nil), "pb.OptionQuoteSlice")
	proto.RegisterType((*OptionMarket)(nil), "pb.OptionMarket")
	proto.RegisterType((*ImpliedVolQuote)(nil), "pb.ImpliedVolQuote")
	proto.RegisterType((*ImpliedVolSlice)(nil), "pb.ImpliedVolSlice")
	proto.RegisterType((*ImpliedVolSurface)(nil), "pb.ImpliedVolSurface")
}
func (this *Index) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Index)
	if !ok {
		that2, ok := that.(Index)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Index")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Index but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Index but is not nil && this == nil")
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if this.Ticker != that1.Ticker {
		return fmt.Errorf("Ticker this(%v) Not Equal that(%v)", this.Ticker, that1.Ticker)
	}
	if this.Value != that1.Value {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	return nil
}
func (this *Index) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Index)
	if !ok {
		that2, ok := that.(Index)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Ticker != that1.Ticker {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Spot) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Spot)
	if !ok {
		that2, ok := that.(Spot)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Spot")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Spot but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Spot but is not nil && this == nil")
	}
	if !this.Index.Equal(that1.Index) {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	return nil
}
func (this *Spot) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Spot)
	if !ok {
		that2, ok := that.(Spot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Index.Equal(that1.Index) {
		return false
	}
	return true
}
func (this *RiskFreeRate) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RiskFreeRate)
	if !ok {
		that2, ok := that.(RiskFreeRate)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RiskFreeRate")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RiskFreeRate but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RiskFreeRate but is not nil && this == nil")
	}
	if !this.Index.Equal(that1.Index) {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	return nil
}
func (this *RiskFreeRate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RiskFreeRate)
	if !ok {
		that2, ok := that.(RiskFreeRate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Index.Equal(that1.Index) {
		return false
	}
	return true
}
func (this *FlatVol) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FlatVol)
	if !ok {
		that2, ok := that.(FlatVol)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FlatVol")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FlatVol but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FlatVol but is not nil && this == nil")
	}
	if !this.Index.Equal(that1.Index) {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	return nil
}
func (this *FlatVol) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FlatVol)
	if !ok {
		that2, ok := that.(FlatVol)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Index.Equal(that1.Index) {
		return false
	}
	return true
}
func (this *OptionQuote) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OptionQuote)
	if !ok {
		that2, ok := that.(OptionQuote)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OptionQuote")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OptionQuote but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OptionQuote but is not nil && this == nil")
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if this.Strike != that1.Strike {
		return fmt.Errorf("Strike this(%v) Not Equal that(%v)", this.Strike, that1.Strike)
	}
	if this.Bid != that1.Bid {
		return fmt.Errorf("Bid this(%v) Not Equal that(%v)", this.Bid, that1.Bid)
	}
	if this.Ask != that1.Ask {
		return fmt.Errorf("Ask this(%v) Not Equal that(%v)", this.Ask, that1.Ask)
	}
	if this.Volume != that1.Volume {
		return fmt.Errorf("Volume this(%v) Not Equal that(%v)", this.Volume, that1.Volume)
	}
	if this.Openinterest != that1.Openinterest {
		return fmt.Errorf("Openinterest this(%v) Not Equal that(%v)", this.Openinterest, that1.Openinterest)
	}
	if this.Putcall != that1.Putcall {
		return fmt.Errorf("Putcall this(%v) Not Equal that(%v)", this.Putcall, that1.Putcall)
	}
	return nil
}
func (this *OptionQuote) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OptionQuote)
	if !ok {
		that2, ok := that.(OptionQuote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Strike != that1.Strike {
		return false
	}
	if this.Bid != that1.Bid {
		return false
	}
	if this.Ask != that1.Ask {
		return false
	}
	if this.Volume != that1.Volume {
		return false
	}
	if this.Openinterest != that1.Openinterest {
		return false
	}
	if this.Putcall != that1.Putcall {
		return false
	}
	return true
}
func (this *OptionQuoteSlice) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OptionQuoteSlice)
	if !ok {
		that2, ok := that.(OptionQuoteSlice)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OptionQuoteSlice")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OptionQuoteSlice but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OptionQuoteSlice but is not nil && this == nil")
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if this.Expiry != that1.Expiry {
		return fmt.Errorf("Expiry this(%v) Not Equal that(%v)", this.Expiry, that1.Expiry)
	}
	if len(this.Puts) != len(that1.Puts) {
		return fmt.Errorf("Puts this(%v) Not Equal that(%v)", len(this.Puts), len(that1.Puts))
	}
	for i := range this.Puts {
		if !this.Puts[i].Equal(that1.Puts[i]) {
			return fmt.Errorf("Puts this[%v](%v) Not Equal that[%v](%v)", i, this.Puts[i], i, that1.Puts[i])
		}
	}
	if len(this.Calls) != len(that1.Calls) {
		return fmt.Errorf("Calls this(%v) Not Equal that(%v)", len(this.Calls), len(that1.Calls))
	}
	for i := range this.Calls {
		if !this.Calls[i].Equal(that1.Calls[i]) {
			return fmt.Errorf("Calls this[%v](%v) Not Equal that[%v](%v)", i, this.Calls[i], i, that1.Calls[i])
		}
	}
	return nil
}
func (this *OptionQuoteSlice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OptionQuoteSlice)
	if !ok {
		that2, ok := that.(OptionQuoteSlice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Expiry != that1.Expiry {
		return false
	}
	if len(this.Puts) != len(that1.Puts) {
		return false
	}
	for i := range this.Puts {
		if !this.Puts[i].Equal(that1.Puts[i]) {
			return false
		}
	}
	if len(this.Calls) != len(that1.Calls) {
		return false
	}
	for i := range this.Calls {
		if !this.Calls[i].Equal(that1.Calls[i]) {
			return false
		}
	}
	return true
}
func (this *OptionMarket) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OptionMarket)
	if !ok {
		that2, ok := that.(OptionMarket)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OptionMarket")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OptionMarket but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OptionMarket but is not nil && this == nil")
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if !this.Spot.Equal(that1.Spot) {
		return fmt.Errorf("Spot this(%v) Not Equal that(%v)", this.Spot, that1.Spot)
	}
	if !this.Vol.Equal(that1.Vol) {
		return fmt.Errorf("Vol this(%v) Not Equal that(%v)", this.Vol, that1.Vol)
	}
	if !this.Rate.Equal(that1.Rate) {
		return fmt.Errorf("Rate this(%v) Not Equal that(%v)", this.Rate, that1.Rate)
	}
	return nil
}
func (this *OptionMarket) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OptionMarket)
	if !ok {
		that2, ok := that.(OptionMarket)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if !this.Spot.Equal(that1.Spot) {
		return false
	}
	if !this.Vol.Equal(that1.Vol) {
		return false
	}
	if !this.Rate.Equal(that1.Rate) {
		return false
	}
	return true
}
func (this *ImpliedVolQuote) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ImpliedVolQuote)
	if !ok {
		that2, ok := that.(ImpliedVolQuote)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ImpliedVolQuote")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ImpliedVolQuote but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ImpliedVolQuote but is not nil && this == nil")
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if !this.Input.Equal(that1.Input) {
		return fmt.Errorf("Input this(%v) Not Equal that(%v)", this.Input, that1.Input)
	}
	if this.Error != that1.Error {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	if this.Vol != that1.Vol {
		return fmt.Errorf("Vol this(%v) Not Equal that(%v)", this.Vol, that1.Vol)
	}
	if this.Nbiteration != that1.Nbiteration {
		return fmt.Errorf("Nbiteration this(%v) Not Equal that(%v)", this.Nbiteration, that1.Nbiteration)
	}
	return nil
}
func (this *ImpliedVolQuote) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ImpliedVolQuote)
	if !ok {
		that2, ok := that.(ImpliedVolQuote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.Vol != that1.Vol {
		return false
	}
	if this.Nbiteration != that1.Nbiteration {
		return false
	}
	return true
}
func (this *ImpliedVolSlice) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ImpliedVolSlice)
	if !ok {
		that2, ok := that.(ImpliedVolSlice)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ImpliedVolSlice")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ImpliedVolSlice but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ImpliedVolSlice but is not nil && this == nil")
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if this.Iserror != that1.Iserror {
		return fmt.Errorf("Iserror this(%v) Not Equal that(%v)", this.Iserror, that1.Iserror)
	}
	if this.Expiry != that1.Expiry {
		return fmt.Errorf("Expiry this(%v) Not Equal that(%v)", this.Expiry, that1.Expiry)
	}
	if len(this.Quotes) != len(that1.Quotes) {
		return fmt.Errorf("Quotes this(%v) Not Equal that(%v)", len(this.Quotes), len(that1.Quotes))
	}
	for i := range this.Quotes {
		if !this.Quotes[i].Equal(that1.Quotes[i]) {
			return fmt.Errorf("Quotes this[%v](%v) Not Equal that[%v](%v)", i, this.Quotes[i], i, that1.Quotes[i])
		}
	}
	return nil
}
func (this *ImpliedVolSlice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ImpliedVolSlice)
	if !ok {
		that2, ok := that.(ImpliedVolSlice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Iserror != that1.Iserror {
		return false
	}
	if this.Expiry != that1.Expiry {
		return false
	}
	if len(this.Quotes) != len(that1.Quotes) {
		return false
	}
	for i := range this.Quotes {
		if !this.Quotes[i].Equal(that1.Quotes[i]) {
			return false
		}
	}
	return true
}
func (this *ImpliedVolSurface) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ImpliedVolSurface)
	if !ok {
		that2, ok := that.(ImpliedVolSurface)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ImpliedVolSurface")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ImpliedVolSurface but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ImpliedVolSurface but is not nil && this == nil")
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if len(this.Slices) != len(that1.Slices) {
		return fmt.Errorf("Slices this(%v) Not Equal that(%v)", len(this.Slices), len(that1.Slices))
	}
	for i := range this.Slices {
		if !this.Slices[i].Equal(that1.Slices[i]) {
			return fmt.Errorf("Slices this[%v](%v) Not Equal that[%v](%v)", i, this.Slices[i], i, that1.Slices[i])
		}
	}
	return nil
}
func (this *ImpliedVolSurface) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ImpliedVolSurface)
	if !ok {
		that2, ok := that.(ImpliedVolSurface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if len(this.Slices) != len(that1.Slices) {
		return false
	}
	for i := range this.Slices {
		if !this.Slices[i].Equal(that1.Slices[i]) {
			return false
		}
	}
	return true
}
func (m *Index) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Index) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Timestamp))))
	}
	if len(m.Ticker) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMarketdata(dAtA, i, uint64(len(m.Ticker)))
		i += copy(dAtA[i:], m.Ticker)
	}
	if m.Value != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Value))))
	}
	return i, nil
}

func (m *Spot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Spot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMarketdata(dAtA, i, uint64(m.Index.Size()))
		n1, err := m.Index.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RiskFreeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RiskFreeRate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMarketdata(dAtA, i, uint64(m.Index.Size()))
		n2, err := m.Index.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *FlatVol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlatVol) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMarketdata(dAtA, i, uint64(m.Index.Size()))
		n3, err := m.Index.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *OptionQuote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionQuote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Timestamp))))
	}
	if m.Strike != 0 {
		dAtA[i] = 0x41
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Strike))))
	}
	if m.Bid != 0 {
		dAtA[i] = 0x49
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Bid))))
	}
	if m.Ask != 0 {
		dAtA[i] = 0x51
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Ask))))
	}
	if m.Volume != 0 {
		dAtA[i] = 0x59
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Volume))))
	}
	if m.Openinterest != 0 {
		dAtA[i] = 0x61
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Openinterest))))
	}
	if len(m.Putcall) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMarketdata(dAtA, i, uint64(len(m.Putcall)))
		i += copy(dAtA[i:], m.Putcall)
	}
	return i, nil
}

func (m *OptionQuoteSlice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionQuoteSlice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Timestamp))))
	}
	if m.Expiry != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Expiry))))
	}
	if len(m.Puts) > 0 {
		for _, msg := range m.Puts {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMarketdata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Calls) > 0 {
		for _, msg := range m.Calls {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMarketdata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OptionMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionMarket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Timestamp))))
	}
	if m.Spot != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMarketdata(dAtA, i, uint64(m.Spot.Size()))
		n4, err := m.Spot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Vol != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMarketdata(dAtA, i, uint64(m.Vol.Size()))
		n5, err := m.Vol.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Rate != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMarketdata(dAtA, i, uint64(m.Rate.Size()))
		n6, err := m.Rate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ImpliedVolQuote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImpliedVolQuote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Timestamp))))
	}
	if m.Input != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMarketdata(dAtA, i, uint64(m.Input.Size()))
		n7, err := m.Input.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMarketdata(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.Vol != 0 {
		dAtA[i] = 0x21
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Vol))))
	}
	if m.Nbiteration != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMarketdata(dAtA, i, uint64(m.Nbiteration))
	}
	return i, nil
}

func (m *ImpliedVolSlice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImpliedVolSlice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Timestamp))))
	}
	if m.Iserror {
		dAtA[i] = 0x10
		i++
		if m.Iserror {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Expiry != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Expiry))))
	}
	if len(m.Quotes) > 0 {
		for _, msg := range m.Quotes {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMarketdata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ImpliedVolSurface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImpliedVolSurface) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Marketdata(dAtA, i, uint64(math.Float64bits(float64(m.Timestamp))))
	}
	if len(m.Slices) > 0 {
		for _, msg := range m.Slices {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMarketdata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Marketdata(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Marketdata(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMarketdata(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedIndex(r randyMarketdata, easy bool) *Index {
	this := &Index{}
	this.Timestamp = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	this.Ticker = string(randStringMarketdata(r))
	this.Value = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Value *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSpot(r randyMarketdata, easy bool) *Spot {
	this := &Spot{}
	if r.Intn(10) != 0 {
		this.Index = NewPopulatedIndex(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRiskFreeRate(r randyMarketdata, easy bool) *RiskFreeRate {
	this := &RiskFreeRate{}
	if r.Intn(10) != 0 {
		this.Index = NewPopulatedIndex(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFlatVol(r randyMarketdata, easy bool) *FlatVol {
	this := &FlatVol{}
	if r.Intn(10) != 0 {
		this.Index = NewPopulatedIndex(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOptionQuote(r randyMarketdata, easy bool) *OptionQuote {
	this := &OptionQuote{}
	this.Timestamp = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	this.Strike = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Strike *= -1
	}
	this.Bid = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Bid *= -1
	}
	this.Ask = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Ask *= -1
	}
	this.Volume = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Volume *= -1
	}
	this.Openinterest = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Openinterest *= -1
	}
	this.Putcall = string(randStringMarketdata(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOptionQuoteSlice(r randyMarketdata, easy bool) *OptionQuoteSlice {
	this := &OptionQuoteSlice{}
	this.Timestamp = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	this.Expiry = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Expiry *= -1
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Puts = make([]*OptionQuote, v1)
		for i := 0; i < v1; i++ {
			this.Puts[i] = NewPopulatedOptionQuote(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Calls = make([]*OptionQuote, v2)
		for i := 0; i < v2; i++ {
			this.Calls[i] = NewPopulatedOptionQuote(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOptionMarket(r randyMarketdata, easy bool) *OptionMarket {
	this := &OptionMarket{}
	this.Timestamp = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	if r.Intn(10) != 0 {
		this.Spot = NewPopulatedSpot(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Vol = NewPopulatedFlatVol(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Rate = NewPopulatedRiskFreeRate(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedImpliedVolQuote(r randyMarketdata, easy bool) *ImpliedVolQuote {
	this := &ImpliedVolQuote{}
	this.Timestamp = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	if r.Intn(10) != 0 {
		this.Input = NewPopulatedOptionQuote(r, easy)
	}
	this.Error = string(randStringMarketdata(r))
	this.Vol = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Vol *= -1
	}
	this.Nbiteration = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Nbiteration *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedImpliedVolSlice(r randyMarketdata, easy bool) *ImpliedVolSlice {
	this := &ImpliedVolSlice{}
	this.Timestamp = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	this.Iserror = bool(bool(r.Intn(2) == 0))
	this.Expiry = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Expiry *= -1
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Quotes = make([]*ImpliedVolQuote, v3)
		for i := 0; i < v3; i++ {
			this.Quotes[i] = NewPopulatedImpliedVolQuote(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedImpliedVolSurface(r randyMarketdata, easy bool) *ImpliedVolSurface {
	this := &ImpliedVolSurface{}
	this.Timestamp = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Slices = make([]*ImpliedVolSlice, v4)
		for i := 0; i < v4; i++ {
			this.Slices[i] = NewPopulatedImpliedVolSlice(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMarketdata interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMarketdata(r randyMarketdata) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMarketdata(r randyMarketdata) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneMarketdata(r)
	}
	return string(tmps)
}
func randUnrecognizedMarketdata(r randyMarketdata, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMarketdata(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMarketdata(dAtA []byte, r randyMarketdata, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMarketdata(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulateMarketdata(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulateMarketdata(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMarketdata(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMarketdata(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMarketdata(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMarketdata(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Index) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 9
	}
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovMarketdata(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *Spot) Size() (n int) {
	var l int
	_ = l
	if m.Index != nil {
		l = m.Index.Size()
		n += 1 + l + sovMarketdata(uint64(l))
	}
	return n
}

func (m *RiskFreeRate) Size() (n int) {
	var l int
	_ = l
	if m.Index != nil {
		l = m.Index.Size()
		n += 1 + l + sovMarketdata(uint64(l))
	}
	return n
}

func (m *FlatVol) Size() (n int) {
	var l int
	_ = l
	if m.Index != nil {
		l = m.Index.Size()
		n += 1 + l + sovMarketdata(uint64(l))
	}
	return n
}

func (m *OptionQuote) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 9
	}
	if m.Strike != 0 {
		n += 9
	}
	if m.Bid != 0 {
		n += 9
	}
	if m.Ask != 0 {
		n += 9
	}
	if m.Volume != 0 {
		n += 9
	}
	if m.Openinterest != 0 {
		n += 9
	}
	l = len(m.Putcall)
	if l > 0 {
		n += 1 + l + sovMarketdata(uint64(l))
	}
	return n
}

func (m *OptionQuoteSlice) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 9
	}
	if m.Expiry != 0 {
		n += 9
	}
	if len(m.Puts) > 0 {
		for _, e := range m.Puts {
			l = e.Size()
			n += 1 + l + sovMarketdata(uint64(l))
		}
	}
	if len(m.Calls) > 0 {
		for _, e := range m.Calls {
			l = e.Size()
			n += 1 + l + sovMarketdata(uint64(l))
		}
	}
	return n
}

func (m *OptionMarket) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 9
	}
	if m.Spot != nil {
		l = m.Spot.Size()
		n += 1 + l + sovMarketdata(uint64(l))
	}
	if m.Vol != nil {
		l = m.Vol.Size()
		n += 1 + l + sovMarketdata(uint64(l))
	}
	if m.Rate != nil {
		l = m.Rate.Size()
		n += 1 + l + sovMarketdata(uint64(l))
	}
	return n
}

func (m *ImpliedVolQuote) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 9
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMarketdata(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovMarketdata(uint64(l))
	}
	if m.Vol != 0 {
		n += 9
	}
	if m.Nbiteration != 0 {
		n += 1 + sovMarketdata(uint64(m.Nbiteration))
	}
	return n
}

func (m *ImpliedVolSlice) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 9
	}
	if m.Iserror {
		n += 2
	}
	if m.Expiry != 0 {
		n += 9
	}
	if len(m.Quotes) > 0 {
		for _, e := range m.Quotes {
			l = e.Size()
			n += 1 + l + sovMarketdata(uint64(l))
		}
	}
	return n
}

func (m *ImpliedVolSurface) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 9
	}
	if len(m.Slices) > 0 {
		for _, e := range m.Slices {
			l = e.Size()
			n += 1 + l + sovMarketdata(uint64(l))
		}
	}
	return n
}

func sovMarketdata(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMarketdata(x uint64) (n int) {
	return sovMarketdata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Index) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Index: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Index: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Timestamp = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMarketdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarketdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Spot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Spot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Spot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketdata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Index == nil {
				m.Index = &Index{}
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarketdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RiskFreeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RiskFreeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RiskFreeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketdata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Index == nil {
				m.Index = &Index{}
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarketdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlatVol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlatVol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlatVol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketdata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Index == nil {
				m.Index = &Index{}
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarketdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptionQuote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionQuote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionQuote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Timestamp = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strike", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Strike = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Bid = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Ask = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Volume = float64(math.Float64frombits(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openinterest", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Openinterest = float64(math.Float64frombits(v))
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Putcall", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Putcall = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarketdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptionQuoteSlice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionQuoteSlice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionQuoteSlice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Timestamp = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Expiry = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Puts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketdata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Puts = append(m.Puts, &OptionQuote{})
			if err := m.Puts[len(m.Puts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketdata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Calls = append(m.Calls, &OptionQuote{})
			if err := m.Calls[len(m.Calls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarketdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptionMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Timestamp = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketdata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spot == nil {
				m.Spot = &Spot{}
			}
			if err := m.Spot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketdata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vol == nil {
				m.Vol = &FlatVol{}
			}
			if err := m.Vol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketdata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rate == nil {
				m.Rate = &RiskFreeRate{}
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarketdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImpliedVolQuote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImpliedVolQuote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImpliedVolQuote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Timestamp = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketdata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &OptionQuote{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vol", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Vol = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nbiteration", wireType)
			}
			m.Nbiteration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nbiteration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMarketdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarketdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImpliedVolSlice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImpliedVolSlice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImpliedVolSlice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Timestamp = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iserror", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Iserror = bool(v != 0)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Expiry = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketdata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quotes = append(m.Quotes, &ImpliedVolQuote{})
			if err := m.Quotes[len(m.Quotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarketdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImpliedVolSurface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImpliedVolSurface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImpliedVolSurface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Timestamp = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketdata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slices = append(m.Slices, &ImpliedVolSlice{})
			if err := m.Slices[len(m.Slices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarketdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarketdata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarketdata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarketdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMarketdata
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMarketdata
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMarketdata(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMarketdata = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarketdata   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("marketdata.proto", fileDescriptorMarketdata) }

var fileDescriptorMarketdata = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0xc5, 0xdd, 0x4d, 0xda, 0xcc, 0x06, 0x35, 0x18, 0x84, 0x2c, 0x54, 0x96, 0x68, 0x69, 0x45,
	0x44, 0x45, 0x2a, 0x85, 0x3f, 0xe0, 0x50, 0xa9, 0x07, 0x84, 0x70, 0xa5, 0x1e, 0x91, 0xbc, 0x89,
	0x5b, 0xac, 0x6c, 0x62, 0x63, 0x7b, 0xab, 0xf2, 0x13, 0x70, 0xe1, 0xc0, 0x91, 0x23, 0x9f, 0xc0,
	0x05, 0x89, 0x23, 0x47, 0x3e, 0xa1, 0x0d, 0x3f, 0xc1, 0x11, 0x79, 0x76, 0x23, 0x36, 0xa2, 0x52,
	0x7a, 0xdb, 0xf7, 0x9e, 0x67, 0xfc, 0xc6, 0x6f, 0x12, 0xe8, 0xcd, 0x84, 0x9d, 0x4a, 0x3f, 0x11,
	0x5e, 0x0c, 0x8d, 0xd5, 0x5e, 0xd3, 0x0d, 0x93, 0x3f, 0x78, 0x76, 0xa6, 0xfc, 0xdb, 0x32, 0x1f,
	0x8e, 0xf5, 0xec, 0xe0, 0x4c, 0x9f, 0xe9, 0x03, 0x94, 0xf2, 0xf2, 0x14, 0x11, 0x02, 0xfc, 0xaa,
	0x4a, 0xb2, 0x63, 0x68, 0x1d, 0xcd, 0x27, 0xf2, 0x82, 0xee, 0x40, 0xc7, 0xab, 0x99, 0x74, 0x5e,
	0xcc, 0x0c, 0x23, 0x7d, 0x32, 0x20, 0xfc, 0x1f, 0x41, 0xef, 0x43, 0xdb, 0xab, 0xf1, 0x54, 0x5a,
	0xb6, 0xd1, 0x27, 0x83, 0x0e, 0xaf, 0x11, 0xbd, 0x07, 0xad, 0x73, 0x51, 0x94, 0x92, 0x45, 0x58,
	0x51, 0x81, 0xec, 0x09, 0xc4, 0xc7, 0x46, 0x7b, 0xfa, 0x08, 0x5a, 0x2a, 0x34, 0xc7, 0x7e, 0xc9,
	0xa8, 0x33, 0x34, 0xf9, 0x10, 0x6f, 0xe3, 0x15, 0x9f, 0x1d, 0x40, 0x97, 0x2b, 0x37, 0x3d, 0xb4,
	0x52, 0x72, 0xe1, 0xe5, 0xfa, 0x82, 0xa7, 0xb0, 0x79, 0x58, 0x08, 0x7f, 0xa2, 0x8b, 0xf5, 0x67,
	0xbf, 0x13, 0x48, 0x5e, 0x19, 0xaf, 0xf4, 0xfc, 0x75, 0xa9, 0xbd, 0x5c, 0x3f, 0xa1, 0xf3, 0x56,
	0x4d, 0x25, 0xdb, 0x42, 0xa9, 0x46, 0xb4, 0x07, 0x51, 0xae, 0x26, 0xac, 0x83, 0x64, 0xf8, 0x0c,
	0x8c, 0x70, 0x53, 0x06, 0x15, 0x23, 0xdc, 0x34, 0xd4, 0x9e, 0xeb, 0xa2, 0x9c, 0x49, 0x96, 0x54,
	0xb5, 0x15, 0xa2, 0x19, 0x74, 0xb5, 0x91, 0x73, 0x35, 0xf7, 0xd2, 0x4a, 0xe7, 0x59, 0x17, 0xd5,
	0x15, 0x8e, 0x32, 0xd8, 0x34, 0xa5, 0x1f, 0x8b, 0xa2, 0x60, 0xb7, 0xf1, 0x69, 0x97, 0x30, 0xfb,
	0x44, 0xa0, 0xd7, 0xf0, 0x7f, 0x5c, 0xa8, 0xf1, 0x0d, 0x86, 0x90, 0x17, 0x46, 0xd9, 0xf7, 0x18,
	0x13, 0xe1, 0x35, 0xa2, 0x8f, 0x21, 0x36, 0xa5, 0x77, 0x2c, 0xea, 0x47, 0x83, 0x64, 0xb4, 0x1d,
	0x9e, 0xaa, 0xd1, 0x99, 0xa3, 0x48, 0xf7, 0xa0, 0x15, 0xee, 0x75, 0x2c, 0xbe, 0xfe, 0x54, 0xa5,
	0x66, 0x1f, 0x09, 0x74, 0x2b, 0xfa, 0x25, 0xee, 0xdf, 0x1a, 0x4b, 0x3b, 0x10, 0x3b, 0xa3, 0x3d,
	0x1a, 0x4a, 0x46, 0x5b, 0xa1, 0x69, 0xd8, 0x0d, 0x8e, 0x2c, 0x7d, 0x08, 0xd1, 0xb9, 0x2e, 0x70,
	0x7b, 0x92, 0x51, 0x12, 0xc4, 0x3a, 0x5e, 0x1e, 0x78, 0xba, 0x0b, 0xb1, 0x15, 0x5e, 0xb2, 0x18,
	0xf5, 0x5e, 0xd0, 0x9b, 0xfb, 0xc2, 0x51, 0xcd, 0xbe, 0x10, 0xd8, 0x3e, 0x9a, 0x99, 0x42, 0xc9,
	0xc9, 0x89, 0x2e, 0x6e, 0x12, 0xf6, 0x5e, 0xd8, 0x1d, 0x53, 0x2e, 0x5d, 0xfd, 0x3f, 0x2a, 0xaa,
	0x61, 0xbb, 0xa5, 0xb5, 0xda, 0xa2, 0xbf, 0x0e, 0xaf, 0x40, 0xc8, 0x3f, 0x78, 0x8e, 0xab, 0xfc,
	0x83, 0xcd, 0x3e, 0x24, 0xf3, 0x5c, 0x79, 0x69, 0x45, 0x68, 0xc1, 0x5a, 0x7d, 0x32, 0x88, 0x78,
	0x93, 0xca, 0x3e, 0xac, 0x58, 0xbc, 0x49, 0x94, 0x0c, 0x36, 0x95, 0xab, 0x6e, 0x0f, 0x26, 0xb7,
	0xf8, 0x12, 0x36, 0x42, 0x8e, 0x56, 0x42, 0xde, 0x87, 0xf6, 0xbb, 0xe0, 0x7e, 0x19, 0xe0, 0x5d,
	0xfc, 0x45, 0xac, 0xbe, 0x0b, 0xaf, 0x8f, 0x64, 0x6f, 0xe0, 0x4e, 0xc3, 0x4f, 0x69, 0x4f, 0xc5,
	0x5a, 0x47, 0xfb, 0xd0, 0x76, 0xc1, 0xb8, 0x63, 0x1b, 0xd7, 0xf5, 0xc7, 0xa1, 0x78, 0x7d, 0xe4,
	0xc5, 0xee, 0xe5, 0x55, 0x4a, 0xfe, 0x5c, 0xa5, 0xe4, 0xeb, 0x22, 0x25, 0xdf, 0x16, 0x29, 0xf9,
	0xb1, 0x48, 0xc9, 0xcf, 0x45, 0x4a, 0x7e, 0x2d, 0x52, 0x72, 0xb9, 0x48, 0xc9, 0xe7, 0xdf, 0xe9,
	0xad, 0xbc, 0x8d, 0x7f, 0x42, 0xcf, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x79, 0x12, 0xe8, 0xda,
	0xcb, 0x04, 0x00, 0x00,
}
