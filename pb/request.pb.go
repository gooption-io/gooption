// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: request.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		request.proto
		marketdata.proto

	It has these top-level messages:
		Contract
		PriceRequest
		PriceResponse
		GreekRequest
		GreekResponse
		ImpliedVolRequest
		ImpliedVolResponse
		Spot
		RiskFreeRate
		FlatVol
		OptionQuote
		OptionQuoteSlice
		OptionMarket
		ImpliedVolSlice
		ImpliedVolSurface
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Contract struct {
	Strike  float64    `protobuf:"fixed64,1,opt,name=strike,proto3" json:"strike,omitempty"`
	Expiry  float32    `protobuf:"fixed32,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Putcall OptionType `protobuf:"varint,3,opt,name=putcall,proto3,enum=pb.OptionType" json:"putcall,omitempty"`
}

func (m *Contract) Reset()                    { *m = Contract{} }
func (m *Contract) String() string            { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()               {}
func (*Contract) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{0} }

func (m *Contract) GetStrike() float64 {
	if m != nil {
		return m.Strike
	}
	return 0
}

func (m *Contract) GetExpiry() float32 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *Contract) GetPutcall() OptionType {
	if m != nil {
		return m.Putcall
	}
	return OptionType_PUT
}

type PriceRequest struct {
	Pricingdate float32       `protobuf:"fixed32,1,opt,name=pricingdate,proto3" json:"pricingdate,omitempty"`
	Contract    *Contract     `protobuf:"bytes,2,opt,name=contract" json:"contract,omitempty"`
	Marketdata  *OptionMarket `protobuf:"bytes,3,opt,name=marketdata" json:"marketdata,omitempty"`
}

func (m *PriceRequest) Reset()                    { *m = PriceRequest{} }
func (m *PriceRequest) String() string            { return proto.CompactTextString(m) }
func (*PriceRequest) ProtoMessage()               {}
func (*PriceRequest) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{1} }

func (m *PriceRequest) GetPricingdate() float32 {
	if m != nil {
		return m.Pricingdate
	}
	return 0
}

func (m *PriceRequest) GetContract() *Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *PriceRequest) GetMarketdata() *OptionMarket {
	if m != nil {
		return m.Marketdata
	}
	return nil
}

type PriceResponse struct {
	Price float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Error string  `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *PriceResponse) Reset()                    { *m = PriceResponse{} }
func (m *PriceResponse) String() string            { return proto.CompactTextString(m) }
func (*PriceResponse) ProtoMessage()               {}
func (*PriceResponse) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{2} }

func (m *PriceResponse) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *PriceResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GreekRequest struct {
	Request *PriceRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Greek   []string      `protobuf:"bytes,2,rep,name=greek" json:"greek,omitempty"`
}

func (m *GreekRequest) Reset()                    { *m = GreekRequest{} }
func (m *GreekRequest) String() string            { return proto.CompactTextString(m) }
func (*GreekRequest) ProtoMessage()               {}
func (*GreekRequest) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{3} }

func (m *GreekRequest) GetRequest() *PriceRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *GreekRequest) GetGreek() []string {
	if m != nil {
		return m.Greek
	}
	return nil
}

type GreekResponse struct {
	Greeks []*GreekResponse_Greek `protobuf:"bytes,1,rep,name=greeks" json:"greeks,omitempty"`
	Error  string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *GreekResponse) Reset()                    { *m = GreekResponse{} }
func (m *GreekResponse) String() string            { return proto.CompactTextString(m) }
func (*GreekResponse) ProtoMessage()               {}
func (*GreekResponse) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{4} }

func (m *GreekResponse) GetGreeks() []*GreekResponse_Greek {
	if m != nil {
		return m.Greeks
	}
	return nil
}

func (m *GreekResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GreekResponse_Greek struct {
	Label string  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Error string  `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *GreekResponse_Greek) Reset()                    { *m = GreekResponse_Greek{} }
func (m *GreekResponse_Greek) String() string            { return proto.CompactTextString(m) }
func (*GreekResponse_Greek) ProtoMessage()               {}
func (*GreekResponse_Greek) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{4, 0} }

func (m *GreekResponse_Greek) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *GreekResponse_Greek) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *GreekResponse_Greek) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ImpliedVolRequest struct {
	Pricingdate float32             `protobuf:"fixed32,1,opt,name=pricingdate,proto3" json:"pricingdate,omitempty"`
	Marketdata  *OptionMarket       `protobuf:"bytes,2,opt,name=marketdata" json:"marketdata,omitempty"`
	Quotes      []*OptionQuoteSlice `protobuf:"bytes,3,rep,name=quotes" json:"quotes,omitempty"`
}

func (m *ImpliedVolRequest) Reset()                    { *m = ImpliedVolRequest{} }
func (m *ImpliedVolRequest) String() string            { return proto.CompactTextString(m) }
func (*ImpliedVolRequest) ProtoMessage()               {}
func (*ImpliedVolRequest) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{5} }

func (m *ImpliedVolRequest) GetPricingdate() float32 {
	if m != nil {
		return m.Pricingdate
	}
	return 0
}

func (m *ImpliedVolRequest) GetMarketdata() *OptionMarket {
	if m != nil {
		return m.Marketdata
	}
	return nil
}

func (m *ImpliedVolRequest) GetQuotes() []*OptionQuoteSlice {
	if m != nil {
		return m.Quotes
	}
	return nil
}

type ImpliedVolResponse struct {
	Volsurface *ImpliedVolSurface `protobuf:"bytes,1,opt,name=volsurface" json:"volsurface,omitempty"`
	Error      string             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ImpliedVolResponse) Reset()                    { *m = ImpliedVolResponse{} }
func (m *ImpliedVolResponse) String() string            { return proto.CompactTextString(m) }
func (*ImpliedVolResponse) ProtoMessage()               {}
func (*ImpliedVolResponse) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{6} }

func (m *ImpliedVolResponse) GetVolsurface() *ImpliedVolSurface {
	if m != nil {
		return m.Volsurface
	}
	return nil
}

func (m *ImpliedVolResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Contract)(nil), "pb.Contract")
	proto.RegisterType((*PriceRequest)(nil), "pb.PriceRequest")
	proto.RegisterType((*PriceResponse)(nil), "pb.PriceResponse")
	proto.RegisterType((*GreekRequest)(nil), "pb.GreekRequest")
	proto.RegisterType((*GreekResponse)(nil), "pb.GreekResponse")
	proto.RegisterType((*GreekResponse_Greek)(nil), "pb.GreekResponse.Greek")
	proto.RegisterType((*ImpliedVolRequest)(nil), "pb.ImpliedVolRequest")
	proto.RegisterType((*ImpliedVolResponse)(nil), "pb.ImpliedVolResponse")
}
func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Strike != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Request(dAtA, i, uint64(math.Float64bits(float64(m.Strike))))
	}
	if m.Expiry != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Request(dAtA, i, uint32(math.Float32bits(float32(m.Expiry))))
	}
	if m.Putcall != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Putcall))
	}
	return i, nil
}

func (m *PriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pricingdate != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Request(dAtA, i, uint32(math.Float32bits(float32(m.Pricingdate))))
	}
	if m.Contract != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Contract.Size()))
		n1, err := m.Contract.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Marketdata != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Marketdata.Size()))
		n2, err := m.Marketdata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *PriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Request(dAtA, i, uint64(math.Float64bits(float64(m.Price))))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *GreekRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreekRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Request.Size()))
		n3, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Greek) > 0 {
		for _, s := range m.Greek {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GreekResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreekResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Greeks) > 0 {
		for _, msg := range m.Greeks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRequest(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *GreekResponse_Greek) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreekResponse_Greek) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if m.Value != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Request(dAtA, i, uint64(math.Float64bits(float64(m.Value))))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *ImpliedVolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImpliedVolRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pricingdate != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Request(dAtA, i, uint32(math.Float32bits(float32(m.Pricingdate))))
	}
	if m.Marketdata != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Marketdata.Size()))
		n4, err := m.Marketdata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Quotes) > 0 {
		for _, msg := range m.Quotes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRequest(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ImpliedVolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImpliedVolResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Volsurface != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Volsurface.Size()))
		n5, err := m.Volsurface.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func encodeFixed64Request(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Request(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRequest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Contract) Size() (n int) {
	var l int
	_ = l
	if m.Strike != 0 {
		n += 9
	}
	if m.Expiry != 0 {
		n += 5
	}
	if m.Putcall != 0 {
		n += 1 + sovRequest(uint64(m.Putcall))
	}
	return n
}

func (m *PriceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Pricingdate != 0 {
		n += 5
	}
	if m.Contract != nil {
		l = m.Contract.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.Marketdata != nil {
		l = m.Marketdata.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *PriceResponse) Size() (n int) {
	var l int
	_ = l
	if m.Price != 0 {
		n += 9
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *GreekRequest) Size() (n int) {
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	if len(m.Greek) > 0 {
		for _, s := range m.Greek {
			l = len(s)
			n += 1 + l + sovRequest(uint64(l))
		}
	}
	return n
}

func (m *GreekResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Greeks) > 0 {
		for _, e := range m.Greeks {
			l = e.Size()
			n += 1 + l + sovRequest(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *GreekResponse_Greek) Size() (n int) {
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *ImpliedVolRequest) Size() (n int) {
	var l int
	_ = l
	if m.Pricingdate != 0 {
		n += 5
	}
	if m.Marketdata != nil {
		l = m.Marketdata.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	if len(m.Quotes) > 0 {
		for _, e := range m.Quotes {
			l = e.Size()
			n += 1 + l + sovRequest(uint64(l))
		}
	}
	return n
}

func (m *ImpliedVolResponse) Size() (n int) {
	var l int
	_ = l
	if m.Volsurface != nil {
		l = m.Volsurface.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func sovRequest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRequest(x uint64) (n int) {
	return sovRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strike", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Strike = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Expiry = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Putcall", wireType)
			}
			m.Putcall = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Putcall |= (OptionType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pricingdate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Pricingdate = float32(math.Float32frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contract == nil {
				m.Contract = &Contract{}
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marketdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Marketdata == nil {
				m.Marketdata = &OptionMarket{}
			}
			if err := m.Marketdata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Price = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GreekRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GreekRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GreekRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &PriceRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Greek", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Greek = append(m.Greek, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GreekResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GreekResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GreekResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Greeks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Greeks = append(m.Greeks, &GreekResponse_Greek{})
			if err := m.Greeks[len(m.Greeks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GreekResponse_Greek) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Greek: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Greek: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Value = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImpliedVolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImpliedVolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImpliedVolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pricingdate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Pricingdate = float32(math.Float32frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marketdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Marketdata == nil {
				m.Marketdata = &OptionMarket{}
			}
			if err := m.Marketdata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quotes = append(m.Quotes, &OptionQuoteSlice{})
			if err := m.Quotes[len(m.Quotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImpliedVolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImpliedVolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImpliedVolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volsurface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Volsurface == nil {
				m.Volsurface = &ImpliedVolSurface{}
			}
			if err := m.Volsurface.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRequest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRequest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRequest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequest   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("request.proto", fileDescriptorRequest) }

var fileDescriptorRequest = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x6e, 0xd4, 0x30,
	0x14, 0xc4, 0x59, 0x75, 0xdb, 0xbe, 0xec, 0x56, 0x8b, 0x55, 0x20, 0xea, 0x21, 0x8a, 0x72, 0x8a,
	0x10, 0x5a, 0x50, 0x10, 0x27, 0x6e, 0x70, 0x40, 0x3d, 0x20, 0x8a, 0x8b, 0xb8, 0x3b, 0xc9, 0xa3,
	0x8a, 0xd6, 0x8d, 0x5d, 0xc7, 0xa9, 0xe8, 0x3f, 0x70, 0x45, 0xe2, 0xca, 0xdf, 0x70, 0xe4, 0x13,
	0xd0, 0xf2, 0x23, 0xc8, 0x8e, 0xd3, 0x64, 0x25, 0x10, 0x3d, 0xce, 0x9b, 0xc9, 0xbc, 0x19, 0x3f,
	0x05, 0x96, 0x1a, 0xaf, 0x3a, 0x6c, 0xcd, 0x5a, 0x69, 0x69, 0x24, 0x0d, 0x54, 0x71, 0xb2, 0xba,
	0xe4, 0x7a, 0x83, 0xa6, 0xe2, 0x86, 0xf7, 0xd3, 0xb4, 0x82, 0x83, 0xd7, 0xb2, 0x31, 0x9a, 0x97,
	0x86, 0x3e, 0x84, 0x79, 0x6b, 0x74, 0xbd, 0xc1, 0x88, 0x24, 0x24, 0x23, 0xcc, 0x23, 0x3b, 0xc7,
	0xcf, 0xaa, 0xd6, 0x37, 0x51, 0x90, 0x90, 0x2c, 0x60, 0x1e, 0xd1, 0x0c, 0xf6, 0x55, 0x67, 0x4a,
	0x2e, 0x44, 0x34, 0x4b, 0x48, 0x76, 0x94, 0x1f, 0xad, 0x55, 0xb1, 0x7e, 0xa7, 0x4c, 0x2d, 0x9b,
	0x0f, 0x37, 0x0a, 0xd9, 0x40, 0xa7, 0x5f, 0x08, 0x2c, 0xce, 0x74, 0x5d, 0x22, 0xeb, 0x23, 0xd1,
	0x04, 0x42, 0xa5, 0xeb, 0xb2, 0x6e, 0x2e, 0x2a, 0x6e, 0xfa, 0x7d, 0x01, 0x9b, 0x8e, 0x68, 0x06,
	0x07, 0xa5, 0x0f, 0xe6, 0xd6, 0x86, 0xf9, 0xc2, 0xba, 0x0f, 0x61, 0xd9, 0x2d, 0x4b, 0x9f, 0x01,
	0x8c, 0xb5, 0x5c, 0x92, 0x30, 0x5f, 0x8d, 0x49, 0xde, 0x3a, 0x8e, 0x4d, 0x34, 0xe9, 0x4b, 0x58,
	0xfa, 0x34, 0xad, 0x92, 0x4d, 0x8b, 0xf4, 0x18, 0xf6, 0xec, 0x6e, 0x74, 0x9b, 0x08, 0xeb, 0x81,
	0x9d, 0xa2, 0xd6, 0x52, 0x3b, 0xcf, 0x43, 0xd6, 0x83, 0xf4, 0x0c, 0x16, 0x6f, 0x34, 0xe2, 0x66,
	0xa8, 0xf2, 0x18, 0xf6, 0xfd, 0x43, 0xbb, 0x1a, 0x7e, 0xf7, 0xb4, 0x2d, 0x1b, 0x04, 0xd6, 0xf1,
	0xc2, 0x7e, 0x1b, 0x05, 0xc9, 0xcc, 0x3a, 0x3a, 0x90, 0x7e, 0x27, 0xb0, 0xf4, 0x96, 0x3e, 0xcf,
	0x53, 0x98, 0x3b, 0xaa, 0x8d, 0x48, 0x32, 0xcb, 0xc2, 0xfc, 0x91, 0xb5, 0xdc, 0x91, 0x78, 0xe4,
	0x65, 0x63, 0xd4, 0x60, 0x12, 0xf5, 0xe4, 0x14, 0xf6, 0x9c, 0xcc, 0xd2, 0x82, 0x17, 0x28, 0x5c,
	0xc2, 0x43, 0xd6, 0x03, 0x3b, 0xbd, 0xe6, 0xa2, 0xbb, 0x6d, 0xed, 0xc0, 0x3f, 0x5a, 0x7f, 0x25,
	0x70, 0xff, 0xf4, 0x52, 0x89, 0x1a, 0xab, 0x8f, 0x52, 0xdc, 0xfd, 0x8c, 0xbb, 0xc7, 0x09, 0xfe,
	0x7f, 0x1c, 0xfa, 0x04, 0xe6, 0x57, 0x9d, 0x34, 0xd8, 0x46, 0x33, 0xd7, 0xfd, 0x78, 0x54, 0xbf,
	0xb7, 0xf3, 0x73, 0x61, 0x5f, 0xd6, 0x6b, 0x52, 0x0e, 0x74, 0x1a, 0xcb, 0xbf, 0xdf, 0x0b, 0x80,
	0x6b, 0x29, 0xda, 0x4e, 0x7f, 0xe2, 0x25, 0xfa, 0xb3, 0x3c, 0xb0, 0x3e, 0xa3, 0xf6, 0xbc, 0x27,
	0xd9, 0x44, 0xf8, 0xf7, 0x57, 0x7c, 0xb5, 0xfa, 0xb1, 0x8d, 0xc9, 0xcf, 0x6d, 0x4c, 0x7e, 0x6d,
	0x63, 0xf2, 0xed, 0x77, 0x7c, 0xaf, 0x98, 0xbb, 0x7f, 0xe7, 0xf9, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x5a, 0x46, 0x89, 0x15, 0x62, 0x03, 0x00, 0x00,
}
