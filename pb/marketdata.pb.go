// Code generated by protoc-gen-go.
// source: marketdata.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	marketdata.proto
	request.proto

It has these top-level messages:
	Spot
	RiskFreeRate
	FlatVol
	OptionQuote
	OptionQuoteSlice
	OptionMarket
	ImpliedVolSlice
	ImpliedVolSurface
	Contract
	PriceRequest
	PriceResponse
	GreekRequest
	GreekResponse
	ImpliedVolRequest
	ImpliedVolResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OptionType int32

const (
	OptionType_PUT  OptionType = 0
	OptionType_CALL OptionType = 1
)

var OptionType_name = map[int32]string{
	0: "PUT",
	1: "CALL",
}
var OptionType_value = map[string]int32{
	"PUT":  0,
	"CALL": 1,
}

func (x OptionType) String() string {
	return proto.EnumName(OptionType_name, int32(x))
}
func (OptionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Spot struct {
	Timestamp float32 `protobuf:"fixed32,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Value     float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
	Ticker    string  `protobuf:"bytes,3,opt,name=ticker" json:"ticker,omitempty"`
}

func (m *Spot) Reset()                    { *m = Spot{} }
func (m *Spot) String() string            { return proto.CompactTextString(m) }
func (*Spot) ProtoMessage()               {}
func (*Spot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Spot) GetTimestamp() float32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Spot) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Spot) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

type RiskFreeRate struct {
	Timestamp float32 `protobuf:"fixed32,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Ticker    string  `protobuf:"bytes,2,opt,name=ticker" json:"ticker,omitempty"`
	Value     float64 `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
}

func (m *RiskFreeRate) Reset()                    { *m = RiskFreeRate{} }
func (m *RiskFreeRate) String() string            { return proto.CompactTextString(m) }
func (*RiskFreeRate) ProtoMessage()               {}
func (*RiskFreeRate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RiskFreeRate) GetTimestamp() float32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RiskFreeRate) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *RiskFreeRate) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type FlatVol struct {
	Timestamp float32 `protobuf:"fixed32,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Ticker    string  `protobuf:"bytes,2,opt,name=ticker" json:"ticker,omitempty"`
	Value     float64 `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
}

func (m *FlatVol) Reset()                    { *m = FlatVol{} }
func (m *FlatVol) String() string            { return proto.CompactTextString(m) }
func (*FlatVol) ProtoMessage()               {}
func (*FlatVol) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FlatVol) GetTimestamp() float32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *FlatVol) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *FlatVol) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type OptionQuote struct {
	Timestamp    float32    `protobuf:"fixed32,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Strike       float64    `protobuf:"fixed64,8,opt,name=strike" json:"strike,omitempty"`
	Bid          float64    `protobuf:"fixed64,9,opt,name=bid" json:"bid,omitempty"`
	Ask          float64    `protobuf:"fixed64,10,opt,name=ask" json:"ask,omitempty"`
	Volume       float32    `protobuf:"fixed32,11,opt,name=volume" json:"volume,omitempty"`
	Openinterest float32    `protobuf:"fixed32,12,opt,name=openinterest" json:"openinterest,omitempty"`
	Putcall      OptionType `protobuf:"varint,13,opt,name=putcall,enum=pb.OptionType" json:"putcall,omitempty"`
}

func (m *OptionQuote) Reset()                    { *m = OptionQuote{} }
func (m *OptionQuote) String() string            { return proto.CompactTextString(m) }
func (*OptionQuote) ProtoMessage()               {}
func (*OptionQuote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OptionQuote) GetTimestamp() float32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *OptionQuote) GetStrike() float64 {
	if m != nil {
		return m.Strike
	}
	return 0
}

func (m *OptionQuote) GetBid() float64 {
	if m != nil {
		return m.Bid
	}
	return 0
}

func (m *OptionQuote) GetAsk() float64 {
	if m != nil {
		return m.Ask
	}
	return 0
}

func (m *OptionQuote) GetVolume() float32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *OptionQuote) GetOpeninterest() float32 {
	if m != nil {
		return m.Openinterest
	}
	return 0
}

func (m *OptionQuote) GetPutcall() OptionType {
	if m != nil {
		return m.Putcall
	}
	return OptionType_PUT
}

type OptionQuoteSlice struct {
	Timestamp float32        `protobuf:"fixed32,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Expiry    float32        `protobuf:"fixed32,2,opt,name=expiry" json:"expiry,omitempty"`
	Puts      []*OptionQuote `protobuf:"bytes,3,rep,name=puts" json:"puts,omitempty"`
	Calls     []*OptionQuote `protobuf:"bytes,4,rep,name=calls" json:"calls,omitempty"`
}

func (m *OptionQuoteSlice) Reset()                    { *m = OptionQuoteSlice{} }
func (m *OptionQuoteSlice) String() string            { return proto.CompactTextString(m) }
func (*OptionQuoteSlice) ProtoMessage()               {}
func (*OptionQuoteSlice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OptionQuoteSlice) GetTimestamp() float32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *OptionQuoteSlice) GetExpiry() float32 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *OptionQuoteSlice) GetPuts() []*OptionQuote {
	if m != nil {
		return m.Puts
	}
	return nil
}

func (m *OptionQuoteSlice) GetCalls() []*OptionQuote {
	if m != nil {
		return m.Calls
	}
	return nil
}

type OptionMarket struct {
	Timestamp float32       `protobuf:"fixed32,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Spot      *Spot         `protobuf:"bytes,2,opt,name=spot" json:"spot,omitempty"`
	Vol       *FlatVol      `protobuf:"bytes,3,opt,name=vol" json:"vol,omitempty"`
	Rate      *RiskFreeRate `protobuf:"bytes,4,opt,name=rate" json:"rate,omitempty"`
}

func (m *OptionMarket) Reset()                    { *m = OptionMarket{} }
func (m *OptionMarket) String() string            { return proto.CompactTextString(m) }
func (*OptionMarket) ProtoMessage()               {}
func (*OptionMarket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OptionMarket) GetTimestamp() float32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *OptionMarket) GetSpot() *Spot {
	if m != nil {
		return m.Spot
	}
	return nil
}

func (m *OptionMarket) GetVol() *FlatVol {
	if m != nil {
		return m.Vol
	}
	return nil
}

func (m *OptionMarket) GetRate() *RiskFreeRate {
	if m != nil {
		return m.Rate
	}
	return nil
}

type ImpliedVolSlice struct {
	Timestamp         float32        `protobuf:"fixed32,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Iserror           bool           `protobuf:"varint,2,opt,name=iserror" json:"iserror,omitempty"`
	Expiry            float32        `protobuf:"fixed32,3,opt,name=expiry" json:"expiry,omitempty"`
	Errors            []string       `protobuf:"bytes,4,rep,name=errors" json:"errors,omitempty"`
	Strikes           []float64      `protobuf:"fixed64,5,rep,packed,name=strikes" json:"strikes,omitempty"`
	Vols              []float64      `protobuf:"fixed64,6,rep,packed,name=vols" json:"vols,omitempty"`
	Nbsolveriteration []int64        `protobuf:"varint,7,rep,packed,name=nbsolveriteration" json:"nbsolveriteration,omitempty"`
	Quotes            []*OptionQuote `protobuf:"bytes,8,rep,name=quotes" json:"quotes,omitempty"`
}

func (m *ImpliedVolSlice) Reset()                    { *m = ImpliedVolSlice{} }
func (m *ImpliedVolSlice) String() string            { return proto.CompactTextString(m) }
func (*ImpliedVolSlice) ProtoMessage()               {}
func (*ImpliedVolSlice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ImpliedVolSlice) GetTimestamp() float32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ImpliedVolSlice) GetIserror() bool {
	if m != nil {
		return m.Iserror
	}
	return false
}

func (m *ImpliedVolSlice) GetExpiry() float32 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *ImpliedVolSlice) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *ImpliedVolSlice) GetStrikes() []float64 {
	if m != nil {
		return m.Strikes
	}
	return nil
}

func (m *ImpliedVolSlice) GetVols() []float64 {
	if m != nil {
		return m.Vols
	}
	return nil
}

func (m *ImpliedVolSlice) GetNbsolveriteration() []int64 {
	if m != nil {
		return m.Nbsolveriteration
	}
	return nil
}

func (m *ImpliedVolSlice) GetQuotes() []*OptionQuote {
	if m != nil {
		return m.Quotes
	}
	return nil
}

type ImpliedVolSurface struct {
	Timestamp  float32            `protobuf:"fixed32,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Volsurface []*ImpliedVolSlice `protobuf:"bytes,2,rep,name=volsurface" json:"volsurface,omitempty"`
}

func (m *ImpliedVolSurface) Reset()                    { *m = ImpliedVolSurface{} }
func (m *ImpliedVolSurface) String() string            { return proto.CompactTextString(m) }
func (*ImpliedVolSurface) ProtoMessage()               {}
func (*ImpliedVolSurface) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ImpliedVolSurface) GetTimestamp() float32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ImpliedVolSurface) GetVolsurface() []*ImpliedVolSlice {
	if m != nil {
		return m.Volsurface
	}
	return nil
}

func init() {
	proto.RegisterType((*Spot)(nil), "pb.Spot")
	proto.RegisterType((*RiskFreeRate)(nil), "pb.RiskFreeRate")
	proto.RegisterType((*FlatVol)(nil), "pb.FlatVol")
	proto.RegisterType((*OptionQuote)(nil), "pb.OptionQuote")
	proto.RegisterType((*OptionQuoteSlice)(nil), "pb.OptionQuoteSlice")
	proto.RegisterType((*OptionMarket)(nil), "pb.OptionMarket")
	proto.RegisterType((*ImpliedVolSlice)(nil), "pb.ImpliedVolSlice")
	proto.RegisterType((*ImpliedVolSurface)(nil), "pb.ImpliedVolSurface")
	proto.RegisterEnum("pb.OptionType", OptionType_name, OptionType_value)
}

func init() { proto.RegisterFile("marketdata.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd4, 0x3c,
	0x14, 0xfd, 0x1c, 0xa7, 0xf3, 0x73, 0x33, 0x5f, 0x9b, 0x1a, 0x84, 0xbc, 0x28, 0x22, 0x0a, 0x20,
	0x22, 0x84, 0xba, 0x98, 0x3e, 0x01, 0x42, 0xaa, 0x84, 0x54, 0x04, 0xb8, 0x3f, 0x0b, 0x76, 0x9e,
	0x19, 0x57, 0xb2, 0xe2, 0x19, 0x1b, 0xdb, 0x19, 0xd1, 0xa7, 0x60, 0xc3, 0x6b, 0xf1, 0x4a, 0x08,
	0xd9, 0xc9, 0x68, 0x52, 0xa8, 0x34, 0xb3, 0x60, 0xe7, 0x73, 0xce, 0xcd, 0xb9, 0xd7, 0xc7, 0x57,
	0x81, 0x7c, 0xc9, 0x6d, 0x2d, 0xfc, 0x82, 0x7b, 0x7e, 0x6a, 0xac, 0xf6, 0x9a, 0x24, 0x66, 0x56,
	0x32, 0x48, 0x2f, 0x8d, 0xf6, 0xe4, 0x04, 0xc6, 0x5e, 0x2e, 0x85, 0xf3, 0x7c, 0x69, 0x28, 0x2a,
	0x50, 0x95, 0xb0, 0x2d, 0x41, 0x1e, 0xc3, 0xc1, 0x9a, 0xab, 0x46, 0xd0, 0xa4, 0x40, 0x15, 0x62,
	0x2d, 0x20, 0x4f, 0x60, 0xe0, 0xe5, 0xbc, 0x16, 0x96, 0xe2, 0x02, 0x55, 0x63, 0xd6, 0xa1, 0xf2,
	0x0b, 0x4c, 0x98, 0x74, 0xf5, 0xb9, 0x15, 0x82, 0x71, 0x2f, 0x76, 0x78, 0x6f, 0x5d, 0x92, 0xbe,
	0xcb, 0xb6, 0x27, 0xee, 0xf5, 0x2c, 0xaf, 0x61, 0x78, 0xae, 0xb8, 0xbf, 0xd1, 0xea, 0x9f, 0xda,
	0xfe, 0x44, 0x90, 0x7d, 0x34, 0x5e, 0xea, 0xd5, 0xe7, 0x46, 0xef, 0x33, 0xb2, 0xf3, 0x56, 0xd6,
	0x82, 0x8e, 0xa2, 0x49, 0x87, 0x48, 0x0e, 0x78, 0x26, 0x17, 0x74, 0x1c, 0xc9, 0x70, 0x0c, 0x0c,
	0x77, 0x35, 0x85, 0x96, 0xe1, 0xae, 0x0e, 0xdf, 0xae, 0xb5, 0x6a, 0x96, 0x82, 0x66, 0xd1, 0xb6,
	0x43, 0xa4, 0x84, 0x89, 0x36, 0x62, 0x25, 0x57, 0x5e, 0x58, 0xe1, 0x3c, 0x9d, 0x44, 0xf5, 0x1e,
	0x47, 0x2a, 0x18, 0x9a, 0xc6, 0xcf, 0xb9, 0x52, 0xf4, 0xff, 0x02, 0x55, 0x87, 0xd3, 0xc3, 0x53,
	0x33, 0x3b, 0x6d, 0xe7, 0xbe, 0xba, 0x33, 0x82, 0x6d, 0xe4, 0xf2, 0x07, 0x82, 0xbc, 0x77, 0x9f,
	0x4b, 0x25, 0xe7, 0x7b, 0x5c, 0x4a, 0x7c, 0x33, 0xd2, 0xde, 0xc5, 0xc0, 0x12, 0xd6, 0x21, 0xf2,
	0x1c, 0x52, 0xd3, 0x78, 0x47, 0x71, 0x81, 0xab, 0x6c, 0x7a, 0xb4, 0xed, 0x18, 0x9d, 0x59, 0x14,
	0xc9, 0x4b, 0x38, 0x08, 0x7d, 0x1d, 0x4d, 0x1f, 0xae, 0x6a, 0xd5, 0xf2, 0x3b, 0x82, 0x49, 0x4b,
	0x7f, 0x88, 0xcb, 0xb8, 0x63, 0xa4, 0x13, 0x48, 0x9d, 0xd1, 0x3e, 0x0e, 0x94, 0x4d, 0x47, 0xc1,
	0x34, 0x2c, 0x2b, 0x8b, 0x2c, 0x79, 0x0a, 0x78, 0xad, 0x55, 0x7c, 0xc7, 0x6c, 0x9a, 0x05, 0xb1,
	0xdb, 0x0c, 0x16, 0x78, 0xf2, 0x02, 0x52, 0xcb, 0xbd, 0xa0, 0x69, 0xd4, 0xf3, 0xa0, 0xf7, 0xb7,
	0x92, 0x45, 0xb5, 0xfc, 0x85, 0xe0, 0xe8, 0xfd, 0xd2, 0x28, 0x29, 0x16, 0x37, 0x5a, 0xed, 0x93,
	0x13, 0x85, 0xa1, 0x74, 0xc2, 0x5a, 0xdd, 0x6e, 0xd6, 0x88, 0x6d, 0x60, 0x2f, 0x41, 0x7c, 0x2f,
	0xc1, 0xc0, 0x87, 0x82, 0x36, 0x9d, 0x31, 0xeb, 0x50, 0x70, 0x6a, 0x17, 0xc7, 0xd1, 0x83, 0x02,
	0x57, 0x88, 0x6d, 0x20, 0x21, 0x90, 0xae, 0xb5, 0x72, 0x74, 0x10, 0xe9, 0x78, 0x26, 0x6f, 0xe0,
	0x78, 0x35, 0x73, 0x5a, 0xad, 0x85, 0x95, 0x5e, 0x58, 0x1e, 0x52, 0xa4, 0xc3, 0x02, 0x57, 0x98,
	0xfd, 0x2d, 0x90, 0x57, 0x30, 0xf8, 0x1a, 0x92, 0x77, 0x74, 0xf4, 0xf0, 0x8b, 0x74, 0x72, 0x79,
	0x0b, 0xc7, 0xbd, 0xfb, 0x37, 0xf6, 0x96, 0xef, 0x4c, 0xe0, 0x0c, 0x20, 0x4c, 0xd4, 0xd6, 0xd2,
	0x24, 0xfa, 0x3f, 0x0a, 0xfe, 0x7f, 0x04, 0xc9, 0x7a, 0x65, 0xaf, 0x9f, 0x01, 0x6c, 0x17, 0x95,
	0x0c, 0x01, 0x7f, 0xba, 0xbe, 0xca, 0xff, 0x23, 0x23, 0x48, 0xdf, 0xbd, 0xbd, 0xb8, 0xc8, 0xd1,
	0x6c, 0x10, 0x7f, 0x4a, 0x67, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x49, 0xf0, 0xd3, 0xa8,
	0x04, 0x00, 0x00,
}
