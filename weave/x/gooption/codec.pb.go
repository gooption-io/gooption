// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: codec.proto

package gooption

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/lehajam/protoc-gen-weave/x/bucket"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Valuation struct {
	// address of the sender / sig or multisig
	Sender []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// (IOV) domain name of the publisher
	// maybe this can be worked out from the sender address
	Publisher []byte `protobuf:"bytes,2,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// the contract id although we also store the contract
	// we want to be able to index this field and not have to
	// unshah the contract to read it
	ContractId []byte `protobuf:"bytes,3,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	// UTC timestamp at which valuation occured
	// stored as a string
	Timestamp []byte `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// hash of the computation request
	Request []byte `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`
	// hash of the computation response
	Response             []byte   `protobuf:"bytes,6,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Valuation) Reset()         { *m = Valuation{} }
func (m *Valuation) String() string { return proto.CompactTextString(m) }
func (*Valuation) ProtoMessage()    {}
func (*Valuation) Descriptor() ([]byte, []int) {
	return fileDescriptor_codec_70728e044a97a0c3, []int{0}
}
func (m *Valuation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Valuation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Valuation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Valuation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Valuation.Merge(dst, src)
}
func (m *Valuation) XXX_Size() int {
	return m.Size()
}
func (m *Valuation) XXX_DiscardUnknown() {
	xxx_messageInfo_Valuation.DiscardUnknown(m)
}

var xxx_messageInfo_Valuation proto.InternalMessageInfo

func (m *Valuation) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Valuation) GetPublisher() []byte {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *Valuation) GetContractId() []byte {
	if m != nil {
		return m.ContractId
	}
	return nil
}

func (m *Valuation) GetTimestamp() []byte {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Valuation) GetRequest() []byte {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Valuation) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

type CreateValuationMsg struct {
	// address of the sender / sig or multisig
	Sender []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// (IOV) domain name of the publisher
	// maybe this can be worked out from the sender address
	Publisher []byte `protobuf:"bytes,2,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// the contract id although we also store the contract
	// we want to be able to index this field and not have to
	// unshah the contract to read it
	ContractId []byte `protobuf:"bytes,3,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	// UTC timestamp at which valuation occured
	// stored as a string
	Timestamp []byte `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// hash of the computation request
	Request []byte `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`
	// hash of the computation response
	Response             []byte   `protobuf:"bytes,6,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateValuationMsg) Reset()         { *m = CreateValuationMsg{} }
func (m *CreateValuationMsg) String() string { return proto.CompactTextString(m) }
func (*CreateValuationMsg) ProtoMessage()    {}
func (*CreateValuationMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_codec_70728e044a97a0c3, []int{1}
}
func (m *CreateValuationMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateValuationMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateValuationMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateValuationMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateValuationMsg.Merge(dst, src)
}
func (m *CreateValuationMsg) XXX_Size() int {
	return m.Size()
}
func (m *CreateValuationMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateValuationMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CreateValuationMsg proto.InternalMessageInfo

func (m *CreateValuationMsg) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *CreateValuationMsg) GetPublisher() []byte {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *CreateValuationMsg) GetContractId() []byte {
	if m != nil {
		return m.ContractId
	}
	return nil
}

func (m *CreateValuationMsg) GetTimestamp() []byte {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *CreateValuationMsg) GetRequest() []byte {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *CreateValuationMsg) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*Valuation)(nil), "option.Valuation")
	proto.RegisterType((*CreateValuationMsg)(nil), "option.CreateValuationMsg")
}
func (m *Valuation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Valuation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Sender)))
		i += copy(dAtA[i:], m.Sender)
	}
	if len(m.Publisher) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Publisher)))
		i += copy(dAtA[i:], m.Publisher)
	}
	if len(m.ContractId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.ContractId)))
		i += copy(dAtA[i:], m.ContractId)
	}
	if len(m.Timestamp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Timestamp)))
		i += copy(dAtA[i:], m.Timestamp)
	}
	if len(m.Request) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Request)))
		i += copy(dAtA[i:], m.Request)
	}
	if len(m.Response) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Response)))
		i += copy(dAtA[i:], m.Response)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateValuationMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateValuationMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Sender)))
		i += copy(dAtA[i:], m.Sender)
	}
	if len(m.Publisher) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Publisher)))
		i += copy(dAtA[i:], m.Publisher)
	}
	if len(m.ContractId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.ContractId)))
		i += copy(dAtA[i:], m.ContractId)
	}
	if len(m.Timestamp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Timestamp)))
		i += copy(dAtA[i:], m.Timestamp)
	}
	if len(m.Request) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Request)))
		i += copy(dAtA[i:], m.Request)
	}
	if len(m.Response) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Response)))
		i += copy(dAtA[i:], m.Response)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Valuation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Publisher)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateValuationMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Publisher)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCodec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Valuation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Valuation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Valuation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publisher", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publisher = append(m.Publisher[:0], dAtA[iNdEx:postIndex]...)
			if m.Publisher == nil {
				m.Publisher = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = append(m.ContractId[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractId == nil {
				m.ContractId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = append(m.Timestamp[:0], dAtA[iNdEx:postIndex]...)
			if m.Timestamp == nil {
				m.Timestamp = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request[:0], dAtA[iNdEx:postIndex]...)
			if m.Request == nil {
				m.Request = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response[:0], dAtA[iNdEx:postIndex]...)
			if m.Response == nil {
				m.Response = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateValuationMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateValuationMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateValuationMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publisher", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publisher = append(m.Publisher[:0], dAtA[iNdEx:postIndex]...)
			if m.Publisher == nil {
				m.Publisher = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = append(m.ContractId[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractId == nil {
				m.ContractId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = append(m.Timestamp[:0], dAtA[iNdEx:postIndex]...)
			if m.Timestamp == nil {
				m.Timestamp = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request[:0], dAtA[iNdEx:postIndex]...)
			if m.Request == nil {
				m.Request = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response[:0], dAtA[iNdEx:postIndex]...)
			if m.Response == nil {
				m.Response = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("codec.proto", fileDescriptor_codec_70728e044a97a0c3) }

var fileDescriptor_codec_70728e044a97a0c3 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x91, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x65, 0x7e, 0x42, 0xeb, 0x56, 0x20, 0x79, 0x40, 0x56, 0x54, 0x25, 0xa8, 0x13, 0x4b,
	0x9a, 0x81, 0x89, 0xb5, 0x4c, 0x0c, 0x2c, 0x19, 0x58, 0x91, 0xe3, 0x5c, 0x92, 0x40, 0x12, 0x07,
	0xff, 0x00, 0x6f, 0xc7, 0xca, 0xc8, 0xc6, 0x58, 0x94, 0xb1, 0x4f, 0x81, 0xe2, 0x34, 0x6d, 0x24,
	0x60, 0x64, 0xf2, 0x39, 0xf7, 0xf8, 0xe8, 0xea, 0xd3, 0xc5, 0x13, 0x2e, 0x12, 0xe0, 0x8b, 0x5a,
	0x0a, 0x2d, 0x88, 0x23, 0x6a, 0x9d, 0x8b, 0xca, 0x0d, 0xd2, 0x5c, 0x67, 0x26, 0x5e, 0x70, 0x51,
	0x86, 0xa9, 0x48, 0x45, 0x68, 0xe3, 0xd8, 0xdc, 0x5b, 0x67, 0x8d, 0x55, 0x5d, 0xcd, 0xbd, 0x1c,
	0x7c, 0x2f, 0x20, 0x63, 0x0f, 0xac, 0xec, 0x1a, 0x3c, 0x48, 0xa1, 0x0a, 0x5e, 0x80, 0x3d, 0x43,
	0xf8, 0x1a, 0xc6, 0x86, 0x3f, 0x82, 0xde, 0x3c, 0x5d, 0x75, 0xfe, 0x89, 0xf0, 0xf8, 0x96, 0x15,
	0x86, 0xb5, 0x7b, 0xc9, 0x29, 0x76, 0x14, 0x54, 0x09, 0x48, 0x8a, 0xce, 0xd0, 0xf9, 0x34, 0xda,
	0x38, 0x12, 0xe0, 0x71, 0x6d, 0xe2, 0x22, 0x57, 0x19, 0x48, 0xba, 0xd7, 0x46, 0xcb, 0x93, 0xf5,
	0xca, 0x9f, 0x0c, 0xc6, 0xd1, 0x4e, 0x92, 0xb0, 0xa5, 0xaa, 0xb4, 0x64, 0x5c, 0xdf, 0xe5, 0x09,
	0xdd, 0xb7, 0x85, 0xe3, 0xf5, 0xca, 0xc7, 0x78, 0xd4, 0x07, 0x11, 0xee, 0xd5, 0x75, 0x42, 0x66,
	0x78, 0xac, 0xf3, 0x12, 0x94, 0x66, 0x65, 0x4d, 0x0f, 0xec, 0xea, 0xdd, 0x80, 0x50, 0x7c, 0x24,
	0xe1, 0xc9, 0x80, 0xd2, 0xf4, 0xd0, 0x66, 0xbd, 0x25, 0x2e, 0x1e, 0x49, 0x50, 0xb5, 0xa8, 0x14,
	0x50, 0xc7, 0x46, 0x5b, 0x3f, 0x7f, 0x43, 0x98, 0x5c, 0x49, 0x60, 0x1a, 0xb6, 0x7c, 0x37, 0x2a,
	0xfd, 0x13, 0x71, 0xf6, 0x03, 0x71, 0x48, 0xe4, 0xff, 0x42, 0xf4, 0xdf, 0x04, 0xcb, 0xe9, 0x7b,
	0xe3, 0xa1, 0x8f, 0xc6, 0x43, 0x5f, 0x8d, 0x87, 0x62, 0xc7, 0x1e, 0xec, 0xe2, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0xee, 0x56, 0xc5, 0x01, 0x31, 0x02, 0x00, 0x00,
}
